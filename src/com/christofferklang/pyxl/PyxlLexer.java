/* The following code was generated by JFlex 1.4.3 on 6/29/14 8:45 PM */

package com.christofferklang.pyxl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.christofferklang.pyxl.psi.PyxlTypes;
import com.intellij.psi.TokenType;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 6/29/14 8:45 PM from the specification file
 * <tt>/Users/christoffer/code/pycharm-pyxl/src/com/christofferklang/pyxl/Pyxl.flex</tt>
 */
class PyxlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PARSE_TAG_TAIL = 10;
  public static final int YYINITIAL = 0;
  public static final int PARSE_TAG_HEAD = 6;
  public static final int IN_DOCSTRING_OWNER = 4;
  public static final int PENDING_DOCSTRING = 2;
  public static final int IN_PYTHON = 12;
  public static final int PARSE_TAG_CONTENT = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\7\1\0\1\11\1\10\22\0\1\23\1\17\1\6"+
    "\1\13\3\0\1\14\3\0\1\0\1\0\1\3\1\0\1\25\1\2"+
    "\1\2\6\2\2\2\1\22\1\21\1\5\1\24\1\16\2\0\1\4"+
    "\1\12\1\12\1\4\1\4\1\4\3\4\1\4\1\4\1\4\2\4"+
    "\1\4\2\4\1\12\2\4\1\12\2\4\1\4\2\4\1\0\1\15"+
    "\2\0\1\1\1\0\1\4\1\12\1\12\1\4\1\4\1\4\3\4"+
    "\1\4\1\4\1\4\2\4\1\4\2\4\1\12\2\4\1\12\2\4"+
    "\1\4\2\4\57\0\1\0\12\0\1\0\4\0\1\0\5\0\27\0"+
    "\1\0\7\0\30\0\1\0\10\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\2\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0\3\0\2\0"+
    "\1\0\1\0\1\0\2\0\1\0\3\0\2\0\4\0\1\0\2\0"+
    "\1\0\3\0\3\0\2\0\1\0\2\0\1\0\1\0\1\0\1\0"+
    "\1\0\2\0\1\0\1\0\2\0\1\0\1\0\2\0\1\0\3\0"+
    "\1\0\1\0\1\0\2\0\2\0\1\0\1\0\3\0\4\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\2\0\1\0\1\0\1\0\1\0\1\0\3\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\4\0\31\0\140\0\22\0"+
    "\4\0\14\0\16\0\5\0\11\0\1\0\21\0\130\0\5\0\23\0"+
    "\12\0\1\0\13\0\1\0\1\0\3\0\1\0\1\0\1\0\2\0"+
    "\1\0\21\0\1\0\11\0\43\0\1\0\2\0\3\0\3\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\5\0\1\0\1\0\1\0\1\0\1\0\2\0\1\0"+
    "\4\0\60\0\60\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\4\0\3\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\2\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\2\0\1\0\1\0"+
    "\6\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\41\0\46\0\2\0"+
    "\1\0\7\0\47\0\11\0\21\0\1\0\27\0\1\0\3\0\1\0"+
    "\1\0\1\0\2\0\1\0\1\0\13\0\33\0\5\0\3\0\35\0"+
    "\6\0\13\0\32\0\5\0\1\0\12\0\16\0\7\0\12\0\4\0"+
    "\2\0\1\0\143\0\1\0\1\0\7\0\2\0\6\0\2\0\2\0"+
    "\1\0\4\0\2\0\12\0\3\0\2\0\1\0\20\0\1\0\1\0"+
    "\36\0\33\0\2\0\3\0\60\0\46\0\13\0\1\0\u014f\0\2\0"+
    "\1\0\66\0\2\0\1\0\1\0\3\0\10\0\4\0\1\0\2\0"+
    "\1\0\4\0\3\0\12\0\2\0\2\0\12\0\21\0\1\0\2\0"+
    "\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0\1\0\1\0"+
    "\3\0\4\0\2\0\1\0\1\0\3\0\4\0\2\0\2\0\2\0"+
    "\2\0\1\0\11\0\1\0\4\0\2\0\1\0\3\0\2\0\2\0"+
    "\12\0\2\0\17\0\2\0\1\0\1\0\6\0\4\0\2\0\2\0"+
    "\26\0\1\0\7\0\1\0\2\0\1\0\2\0\1\0\2\0\2\0"+
    "\1\0\1\0\3\0\2\0\4\0\2\0\2\0\3\0\13\0\4\0"+
    "\1\0\1\0\7\0\12\0\2\0\3\0\14\0\2\0\1\0\1\0"+
    "\11\0\1\0\3\0\1\0\26\0\1\0\7\0\1\0\2\0\1\0"+
    "\5\0\2\0\1\0\1\0\3\0\5\0\1\0\2\0\1\0\1\0"+
    "\2\0\1\0\2\0\1\0\17\0\2\0\2\0\2\0\12\0\21\0"+
    "\1\0\2\0\1\0\10\0\2\0\2\0\2\0\26\0\1\0\7\0"+
    "\1\0\2\0\1\0\5\0\2\0\1\0\1\0\1\0\1\0\1\0"+
    "\3\0\3\0\2\0\2\0\2\0\1\0\10\0\1\0\1\0\4\0"+
    "\2\0\1\0\3\0\4\0\12\0\1\0\1\0\20\0\1\0\1\0"+
    "\1\0\6\0\3\0\3\0\1\0\4\0\3\0\2\0\1\0\1\0"+
    "\1\0\2\0\3\0\2\0\3\0\3\0\3\0\10\0\1\0\3\0"+
    "\4\0\2\0\1\0\2\0\3\0\3\0\1\0\3\0\1\0\11\0"+
    "\1\0\17\0\11\0\21\0\3\0\1\0\10\0\1\0\3\0\1\0"+
    "\27\0\1\0\12\0\1\0\5\0\4\0\3\0\4\0\1\0\3\0"+
    "\1\0\4\0\7\0\2\0\11\0\2\0\4\0\12\0\22\0\2\0"+
    "\1\0\10\0\1\0\3\0\1\0\27\0\1\0\12\0\1\0\5\0"+
    "\2\0\1\0\1\0\1\0\1\0\5\0\1\0\1\0\2\0\1\0"+
    "\2\0\2\0\7\0\2\0\7\0\1\0\1\0\2\0\4\0\12\0"+
    "\22\0\2\0\1\0\10\0\1\0\3\0\1\0\27\0\1\0\20\0"+
    "\4\0\3\0\3\0\2\0\3\0\1\0\3\0\1\0\11\0\1\0"+
    "\10\0\2\0\4\0\12\0\22\0\2\0\1\0\22\0\3\0\30\0"+
    "\1\0\11\0\1\0\1\0\2\0\7\0\3\0\1\0\4\0\3\0"+
    "\3\0\1\0\1\0\1\0\10\0\22\0\2\0\15\0\60\0\1\0"+
    "\2\0\7\0\5\0\6\0\1\0\10\0\1\0\12\0\47\0\2\0"+
    "\1\0\1\0\2\0\2\0\1\0\1\0\2\0\1\0\6\0\4\0"+
    "\1\0\7\0\1\0\3\0\1\0\1\0\1\0\1\0\2\0\2\0"+
    "\1\0\4\0\1\0\2\0\6\0\1\0\2\0\1\0\2\0\5\0"+
    "\1\0\1\0\1\0\6\0\2\0\12\0\2\0\2\0\42\0\1\0"+
    "\27\0\2\0\6\0\12\0\13\0\1\0\1\0\1\0\1\0\1\0"+
    "\4\0\2\0\10\0\1\0\42\0\6\0\16\0\1\0\5\0\1\0"+
    "\2\0\4\0\4\0\10\0\1\0\44\0\11\0\1\0\71\0\42\0"+
    "\1\0\5\0\1\0\2\0\1\0\1\0\4\0\1\0\1\0\3\0"+
    "\2\0\1\0\1\0\6\0\12\0\6\0\6\0\2\0\2\0\106\0"+
    "\46\0\12\0\51\0\7\0\132\0\5\0\104\0\5\0\122\0\6\0"+
    "\7\0\1\0\77\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0"+
    "\1\0\1\0\4\0\2\0\47\0\1\0\1\0\1\0\4\0\2\0"+
    "\37\0\1\0\1\0\1\0\4\0\2\0\7\0\1\0\1\0\1\0"+
    "\4\0\2\0\7\0\1\0\7\0\1\0\27\0\1\0\37\0\1\0"+
    "\1\0\1\0\4\0\2\0\7\0\1\0\47\0\1\0\23\0\16\0"+
    "\11\0\56\0\125\0\14\0\u026c\0\2\0\10\0\12\0\32\0\5\0"+
    "\113\0\3\0\3\0\17\0\15\0\1\0\4\0\3\0\13\0\22\0"+
    "\3\0\13\0\22\0\2\0\14\0\15\0\1\0\3\0\1\0\2\0"+
    "\14\0\64\0\2\0\1\0\7\0\10\0\1\0\2\0\13\0\3\0"+
    "\1\0\4\0\1\0\1\0\2\0\12\0\41\0\3\0\2\0\12\0"+
    "\6\0\43\0\1\0\64\0\10\0\51\0\1\0\126\0\35\0\3\0"+
    "\3\0\4\0\2\0\3\0\4\0\2\0\1\0\6\0\3\0\12\0"+
    "\12\0\36\0\2\0\5\0\u038b\0\54\0\66\0\12\0\224\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\7\0\4\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0\1\0"+
    "\6\0\10\0\10\0\6\0\2\0\6\0\2\0\10\0\10\0\10\0"+
    "\10\0\6\0\2\0\6\0\2\0\10\0\1\0\1\0\1\0\1\0"+
    "\1\0\1\0\1\0\1\0\10\0\10\0\16\0\2\0\10\0\10\0"+
    "\10\0\10\0\10\0\10\0\5\0\1\0\2\0\4\0\1\0\1\0"+
    "\1\0\3\0\3\0\1\0\2\0\4\0\1\0\3\0\4\0\2\0"+
    "\2\0\4\0\4\0\10\0\5\0\5\0\3\0\1\0\2\0\4\0"+
    "\1\0\102\0\2\0\23\0\1\0\34\0\1\0\15\0\1\0\120\0"+
    "\15\0\4\0\1\0\3\0\6\0\27\0\1\0\4\0\1\0\2\0"+
    "\1\0\3\0\2\0\3\0\1\0\1\0\1\0\3\0\5\0\6\0"+
    "\1\0\1\0\1\0\1\0\1\0\1\0\4\0\1\0\1\0\2\0"+
    "\1\0\1\0\1\0\4\0\1\0\3\0\1\0\2\0\5\0\1\0"+
    "\4\0\26\0\44\0\u0e81\0\1\0\1\0\1\0\31\0\11\0\6\0"+
    "\1\0\5\0\2\0\3\0\1\0\1\0\4\0\126\0\2\0\2\0"+
    "\2\0\2\0\1\0\1\0\132\0\1\0\3\0\1\0\5\0\50\0"+
    "\4\0\136\0\21\0\30\0\70\0\20\0\u0200\0\u19b6\0\112\0\u51a6\0"+
    "\132\0\u048d\0\u0773\0\u2ba4\0\u215c\0\u012e\0\2\0\73\0\225\0\7\0"+
    "\14\0\5\0\5\0\1\0\1\0\12\0\1\0\15\0\1\0\5\0"+
    "\1\0\1\0\1\0\2\0\1\0\2\0\1\0\154\0\41\0\u016b\0"+
    "\22\0\100\0\2\0\66\0\50\0\14\0\4\0\20\0\20\0\4\0"+
    "\17\0\2\0\30\0\3\0\40\0\5\0\1\0\207\0\23\0\12\0"+
    "\7\0\32\0\4\0\1\0\1\0\32\0\12\0\1\0\12\0\1\0"+
    "\55\0\2\0\37\0\3\0\6\0\2\0\6\0\2\0\6\0\2\0"+
    "\3\0\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\2\1\1\2\2\1\1\3\1\2\1\4\1\5"+
    "\1\6\2\4\1\7\1\5\1\1\1\10\1\11\1\1"+
    "\1\12\1\13\1\1\1\14\1\11\1\7\1\15\1\16"+
    "\1\17\1\20\1\0\2\2\1\21\1\2\1\0\3\2"+
    "\2\5\1\22\1\5\1\0\3\5\1\23\2\0\1\10"+
    "\1\0\1\24\1\0\1\25\1\26\1\27\1\30\1\0"+
    "\2\2\1\31\2\0\1\2\2\5\1\32\2\0\1\5"+
    "\2\0\1\31\3\0\1\31\1\0\1\32\3\0\1\32"+
    "\2\0\1\2\3\0\1\2\1\0\1\5\3\0\1\5"+
    "\1\0\2\2\2\5\1\7\4\0\2\2\2\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\26\0\54\0\102\0\130\0\156\0\204\0\232"+
    "\0\260\0\306\0\334\0\362\0\u0108\0\u011e\0\232\0\u0134"+
    "\0\u014a\0\u014a\0\u0160\0\u0176\0\u018c\0\u01a2\0\u01b8\0\232"+
    "\0\u01ce\0\232\0\232\0\u01e4\0\u01fa\0\u0210\0\u0226\0\232"+
    "\0\u023c\0\232\0\u0252\0\u0268\0\u027e\0\u0294\0\232\0\u02aa"+
    "\0\u02c0\0\u02d6\0\u02ec\0\u0302\0\u0318\0\u032e\0\232\0\u0344"+
    "\0\u035a\0\u0370\0\u0386\0\u039c\0\232\0\u03b2\0\u01a2\0\u03c8"+
    "\0\u03de\0\232\0\u01ce\0\232\0\232\0\u03f4\0\232\0\u040a"+
    "\0\u0420\0\u0436\0\232\0\u0420\0\u044c\0\u0462\0\u0478\0\u048e"+
    "\0\232\0\u0478\0\u04a4\0\u04ba\0\u04d0\0\u04e6\0\u04fc\0\u0512"+
    "\0\u0528\0\u053e\0\u0554\0\u056a\0\u0580\0\u0596\0\u05ac\0\u05c2"+
    "\0\u05d8\0\u05ee\0\u0604\0\u061a\0\u0630\0\u0646\0\u065c\0\u0672"+
    "\0\u0688\0\u069e\0\u06b4\0\u06ca\0\u06e0\0\u06f6\0\u070c\0\u0722"+
    "\0\u0738\0\u074e\0\u0764\0\232\0\u077a\0\u0790\0\u07a6\0\u07bc"+
    "\0\u0604\0\u065c\0\u0688\0\u06e0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\5\10\1\11\1\12\3\13\1\14\1\15\1\16\3\10"+
    "\1\13\2\10\1\13\2\10\6\17\1\20\1\21\2\22"+
    "\1\23\1\24\1\25\3\17\1\22\2\17\1\22\2\17"+
    "\5\10\1\11\1\10\3\13\1\10\1\24\4\10\1\13"+
    "\1\10\1\26\1\13\3\10\1\27\2\10\1\27\1\30"+
    "\1\31\3\21\1\27\1\24\2\10\1\32\1\10\1\21"+
    "\2\10\1\21\1\33\1\34\5\35\1\36\5\35\1\37"+
    "\12\35\1\40\1\41\2\40\1\41\2\40\3\21\1\41"+
    "\1\24\2\40\1\42\1\40\1\21\2\40\1\21\2\40"+
    "\7\10\3\21\1\10\1\24\4\10\1\21\2\10\1\21"+
    "\2\10\27\0\1\43\2\0\1\43\5\0\1\43\4\0"+
    "\1\44\6\0\6\45\1\46\1\47\1\0\4\45\1\50"+
    "\10\45\7\0\3\13\6\0\1\13\2\0\1\13\10\0"+
    "\1\12\3\0\1\51\1\0\1\16\11\0\7\15\2\0"+
    "\15\15\7\52\1\47\1\0\3\52\1\53\1\54\10\52"+
    "\6\55\1\56\1\57\1\0\4\55\1\60\10\55\7\0"+
    "\3\21\6\0\1\21\2\0\1\21\10\0\1\20\3\0"+
    "\1\61\1\0\1\25\11\0\7\24\2\0\15\24\7\62"+
    "\1\57\1\0\3\62\1\63\1\64\10\62\7\0\1\65"+
    "\3\0\1\66\7\0\1\67\3\0\1\70\1\27\1\71"+
    "\1\27\5\0\1\27\11\0\1\72\1\0\6\73\1\74"+
    "\2\0\15\73\16\0\1\75\7\0\5\35\1\0\20\35"+
    "\1\0\1\76\2\0\1\76\5\0\1\76\4\0\1\44"+
    "\5\0\1\77\5\37\1\24\1\37\2\35\15\37\1\0"+
    "\2\41\1\0\1\41\5\0\1\41\14\0\2\43\1\0"+
    "\1\43\5\0\1\43\16\0\1\100\22\0\6\45\1\101"+
    "\1\47\1\0\4\45\1\50\10\45\6\0\1\102\1\47"+
    "\5\0\1\103\2\0\1\104\1\47\1\0\1\104\2\0"+
    "\26\45\6\0\1\12\3\0\1\105\1\0\1\16\11\0"+
    "\7\52\1\47\1\0\3\52\1\101\1\54\10\52\7\0"+
    "\1\47\4\0\1\106\1\103\2\0\1\104\1\47\1\0"+
    "\1\104\2\0\26\52\6\55\1\107\1\57\1\0\4\55"+
    "\1\60\10\55\6\0\1\110\1\57\5\0\1\111\2\0"+
    "\1\112\1\57\1\0\1\112\2\0\26\55\6\0\1\20"+
    "\3\0\1\113\1\0\1\25\11\0\7\62\1\57\1\0"+
    "\3\62\1\107\1\64\10\62\7\0\1\57\4\0\1\114"+
    "\1\111\2\0\1\112\1\57\1\0\1\112\2\0\26\62"+
    "\7\66\1\65\1\0\15\66\1\0\2\70\1\0\1\70"+
    "\5\0\1\70\15\0\3\71\5\0\1\71\11\0\1\72"+
    "\2\0\2\76\1\0\1\76\5\0\1\76\16\0\1\115"+
    "\31\0\1\47\5\0\1\103\2\0\1\104\1\47\1\0"+
    "\1\104\2\0\6\102\1\116\6\102\1\117\10\102\6\0"+
    "\1\120\5\0\1\121\11\0\14\106\1\122\1\123\10\106"+
    "\7\0\1\57\5\0\1\111\2\0\1\112\1\57\1\0"+
    "\1\112\2\0\6\110\1\124\6\110\1\125\10\110\6\0"+
    "\1\126\5\0\1\127\11\0\14\114\1\130\1\131\10\114"+
    "\3\115\1\132\22\115\6\102\1\133\6\102\1\134\36\102"+
    "\6\0\1\135\33\0\1\136\11\0\14\106\1\137\1\140"+
    "\36\106\6\110\1\141\6\110\1\142\36\110\6\0\1\143"+
    "\33\0\1\144\11\0\14\114\1\145\1\146\36\114\3\115"+
    "\1\147\22\115\6\102\1\101\6\102\1\134\16\102\1\150"+
    "\6\102\1\134\10\102\6\0\1\102\33\0\1\106\11\0"+
    "\14\106\1\101\1\140\24\106\1\151\1\140\10\106\6\110"+
    "\1\107\6\110\1\142\16\110\1\152\6\110\1\142\10\110"+
    "\6\0\1\110\33\0\1\114\11\0\14\114\1\107\1\146"+
    "\24\114\1\153\1\146\10\114\16\115\1\154\7\115\6\102"+
    "\1\155\6\102\1\134\10\102\14\106\1\156\1\140\10\106"+
    "\6\110\1\157\6\110\1\142\10\110\14\114\1\160\1\146"+
    "\10\114\6\102\1\161\6\102\1\134\10\102\14\106\1\162"+
    "\1\140\10\106\6\110\1\163\6\110\1\142\10\110\14\114"+
    "\1\164\1\146\10\114";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2002];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\6\1\1\11\10\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\1\1\1\0\2\1\1\11"+
    "\1\1\1\0\5\1\1\11\1\1\1\0\3\1\1\11"+
    "\2\0\1\1\1\0\1\11\1\0\2\11\1\1\1\11"+
    "\1\0\2\1\1\11\2\0\3\1\1\11\2\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\3\0\1\1"+
    "\2\0\1\1\3\0\1\1\1\0\1\1\3\0\1\1"+
    "\1\0\4\1\1\11\4\0\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[116];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
// Keep track of tag nesting level
private int tagLevel = 0;
private String tagName = null;

private int yyline = 0;
Stack<String> tagStack = new Stack<String>();

private int getSpaceLength(CharSequence string) {
    String string1 = string.toString();
    string1 = StringUtil.trimEnd(string1, "\\");
    string1 = StringUtil.trimEnd(string1, ";");
    final String s = StringUtil.trimTrailing(string1);
    return yylength()-s.length();
}

private void openTag(String tagName) {
    yybegin(PARSE_TAG_CONTENT);
    tagStack.push(tagName);
}



  PyxlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PyxlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3304) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = (zzBufferArrayL != null ? zzBufferArrayL[zzMarkedPosL] : zzBufferL.charAt(zzMarkedPosL)) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { return PyxlTypes.PYTHON_TEXT;
          }
        case 27: break;
        case 11: 
          { return PyxlTypes.EQ;
          }
        case 28: break;
        case 13: 
          { return TokenType.BAD_CHARACTER;
          }
        case 29: break;
        case 21: 
          { return PyxlTypes.QUOTED_VALUE;
          }
        case 30: break;
        case 17: 
          { yypushback(getSpaceLength(yytext()));
        if (zzCurrentPos != 0) return PyxlTypes.PYTHON_TEXT;
        return PyxlTypes.PYTHON_TEXT;
          }
        case 31: break;
        case 2: 
          { if (zzInput == YYEOF && zzStartRead == 0)
            return PyxlTypes.PYTHON_TEXT;
        else return PyxlTypes.PYTHON_TEXT;
          }
        case 32: break;
        case 7: 
          { return PyxlTypes.COMMENT;
          }
        case 33: break;
        case 25: 
          { yypushback(getSpaceLength(yytext()));
        if (zzCurrentPos != 0) return PyxlTypes.PYTHON_TEXT;
        yybegin(PENDING_DOCSTRING); return PyxlTypes.PYTHON_TEXT;
          }
        case 34: break;
        case 23: 
          { yypushback(yylength());
          yybegin(PARSE_TAG_HEAD);
          }
        case 35: break;
        case 15: 
          { tagStack.pop();
        yybegin(tagStack.size() == 0 ? YYINITIAL : PARSE_TAG_CONTENT);
        return PyxlTypes.RIGHT_ANGLE;
          }
        case 36: break;
        case 16: 
          { yypushback(yylength());
        yybegin(PARSE_TAG_HEAD);
          }
        case 37: break;
        case 19: 
          { yypushback(yylength()-1);
        yybegin(PENDING_DOCSTRING);
        return PyxlTypes.PYTHON_TEXT;
          }
        case 38: break;
        case 4: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 39: break;
        case 9: 
          { return PyxlTypes.LEFT_ANGLE;
          }
        case 40: break;
        case 5: 
          { if (zzInput == YYEOF) return PyxlTypes.PYTHON_TEXT;
        else yybegin(YYINITIAL); return PyxlTypes.PYTHON_TEXT;
          }
        case 41: break;
        case 10: 
          { openTag(tagName);
        return PyxlTypes.RIGHT_ANGLE;
          }
        case 42: break;
        case 24: 
          { yybegin(PARSE_TAG_TAIL);
        return PyxlTypes.START_OF_CLOSE_TAG;
          }
        case 43: break;
        case 20: 
          { yypushback(1);
        return PyxlTypes.ATTR_NAME;
          }
        case 44: break;
        case 18: 
          { yypushback(getSpaceLength(yytext()));
        yybegin(YYINITIAL);
        return PyxlTypes.PYTHON_TEXT;
          }
        case 45: break;
        case 8: 
          { tagName = yytext().toString();
        return PyxlTypes.IDENTIFIER;
          }
        case 46: break;
        case 14: 
          { tagName = yytext().toString();
        if(tagStack.size() == 0 || !tagName.equals(tagStack.peek())) {
            return TokenType.ERROR_ELEMENT;
        }

        return PyxlTypes.IDENTIFIER;
          }
        case 47: break;
        case 3: 
          { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyxlTypes.COMMENT;
          }
        case 48: break;
        case 22: 
          { yybegin(tagStack.size() == 0 ? YYINITIAL : PARSE_TAG_CONTENT);
        return PyxlTypes.SELF_CLOSE_END;
          }
        case 49: break;
        case 12: 
          { return PyxlTypes.TEXT;
          }
        case 50: break;
        case 6: 
          { return PyxlTypes.WHITE_SPACE;
          }
        case 51: break;
        case 26: 
          { yypushback(getSpaceLength(yytext()));
        return PyxlTypes.PYTHON_TEXT;
          }
        case 52: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
