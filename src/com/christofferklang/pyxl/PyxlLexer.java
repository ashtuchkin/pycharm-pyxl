/* The following code was generated by JFlex 1.4.3 on 7/17/14 2:57 PM */

package com.christofferklang.pyxl;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.christofferklang.pyxl.PyxlTokenTypes;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;
import com.intellij.psi.tree.IElementType;


// NOTE: JFlex lexer file is defined in http://www.jflex.de/manual.pdf


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/17/14 2:57 PM from the specification file
 * <tt>/Users/nils/src/hack/pycharm-pyxl/src/com/christofferklang/pyxl/Pyxl.flex</tt>
 */
class PyxlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PENDING_DOCSTRING = 18;
  public static final int IN_PYXL_PYTHON_EMBED = 8;
  public static final int IN_PYXL_TAG_NAME = 6;
  public static final int ATTR_VALUE_2Q = 12;
  public static final int IN_PYXL_BLOCK = 2;
  public static final int IN_CLOSE_TAG = 16;
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 20;
  public static final int ATTR_VALUE_1Q = 10;
  public static final int IN_ATTR = 14;
  public static final int IN_PYXL_COMMENT = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\40\1\55\1\0\1\51\1\13\22\0\1\50\1\56\1\37"+
    "\1\12\1\0\1\75\1\76\1\35\1\102\1\103\1\74\1\27\1\107"+
    "\1\41\1\24\1\44\1\1\1\5\1\3\5\3\2\2\1\57\1\60"+
    "\1\43\1\42\1\45\1\0\1\106\1\16\1\21\1\32\1\16\1\26"+
    "\1\16\3\14\1\30\1\14\1\22\2\14\1\20\1\14\1\14\1\33"+
    "\1\14\1\14\1\33\1\14\1\14\1\17\1\14\1\14\1\104\1\36"+
    "\1\105\1\100\1\14\1\110\1\61\1\10\1\31\1\4\1\25\1\53"+
    "\1\71\1\73\1\52\1\30\1\65\1\11\1\70\1\62\1\7\1\66"+
    "\1\14\1\63\1\54\1\64\1\34\1\14\1\72\1\6\1\67\1\14"+
    "\1\46\1\77\1\47\1\101\53\0\1\15\12\0\1\15\4\0\1\15"+
    "\5\0\27\15\1\0\7\15\30\15\1\0\10\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\2\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\2\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\2\15\1\15\1\15\1\15\1\15"+
    "\3\15\2\15\1\15\1\15\1\15\2\15\1\15\3\15\2\15\4\15"+
    "\1\15\2\15\1\15\3\15\3\15\2\15\1\15\2\15\1\15\1\15"+
    "\1\15\1\15\1\15\2\15\1\15\1\15\2\15\1\15\1\15\2\15"+
    "\1\15\3\15\1\15\1\15\1\15\2\15\2\15\1\15\1\15\3\15"+
    "\4\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\2\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\2\15\1\15\1\15\1\15\1\15\1\15\3\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\4\15\31\0"+
    "\140\15\22\15\4\0\14\15\16\0\5\15\11\0\1\15\21\0\130\23"+
    "\5\0\23\23\12\0\1\15\13\0\1\15\1\0\3\15\1\0\1\15"+
    "\1\0\2\15\1\15\21\15\1\0\11\15\43\15\1\0\2\15\3\15"+
    "\3\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\5\15\1\15\1\15\1\0\1\15\1\15"+
    "\2\15\1\15\4\0\60\15\60\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\0"+
    "\4\23\3\0\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\2\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\0\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\2\0"+
    "\1\15\1\15\6\0\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\41\0"+
    "\46\15\2\0\1\15\7\0\47\15\11\0\21\23\1\0\27\23\1\0"+
    "\3\23\1\0\1\23\1\0\2\23\1\0\1\23\13\0\33\15\5\0"+
    "\3\15\35\0\6\23\13\0\32\15\5\0\1\15\12\15\16\23\7\0"+
    "\12\23\4\0\2\15\1\23\143\15\1\0\1\15\7\23\2\0\6\23"+
    "\2\15\2\23\1\0\4\23\2\15\12\23\3\15\2\0\1\15\20\0"+
    "\1\15\1\23\36\15\33\23\2\0\3\15\60\0\46\15\13\23\1\15"+
    "\u014f\0\2\23\1\23\66\15\2\0\1\23\1\15\3\23\10\23\4\23"+
    "\1\23\2\0\1\15\4\23\3\0\12\15\2\23\2\0\12\23\21\0"+
    "\1\23\2\23\1\0\10\15\2\0\2\15\2\0\26\15\1\0\7\15"+
    "\1\0\1\15\3\0\4\15\2\0\1\23\1\15\3\23\4\23\2\0"+
    "\2\23\2\0\2\23\1\23\11\0\1\23\4\0\2\15\1\0\3\15"+
    "\2\23\2\0\12\23\2\15\17\0\2\23\1\23\1\0\6\15\4\0"+
    "\2\15\2\0\26\15\1\0\7\15\1\0\2\15\1\0\2\15\1\0"+
    "\2\15\2\0\1\23\1\0\3\23\2\23\4\0\2\23\2\0\3\23"+
    "\13\0\4\15\1\0\1\15\7\0\12\23\2\23\3\15\14\0\2\23"+
    "\1\23\1\0\11\15\1\0\3\15\1\0\26\15\1\0\7\15\1\0"+
    "\2\15\1\0\5\15\2\0\1\23\1\15\3\23\5\23\1\0\2\23"+
    "\1\23\1\0\2\23\1\23\2\0\1\15\17\0\2\15\2\23\2\0"+
    "\12\23\21\0\1\23\2\23\1\0\10\15\2\0\2\15\2\0\26\15"+
    "\1\0\7\15\1\0\2\15\1\0\5\15\2\0\1\23\1\15\1\23"+
    "\1\23\1\23\3\23\3\0\2\23\2\0\2\23\1\23\10\0\1\23"+
    "\1\23\4\0\2\15\1\0\3\15\4\0\12\23\1\0\1\15\20\0"+
    "\1\23\1\15\1\0\6\15\3\0\3\15\1\0\4\15\3\0\2\15"+
    "\1\0\1\15\1\0\2\15\3\0\2\15\3\0\3\15\3\0\10\15"+
    "\1\0\3\15\4\0\2\23\1\23\2\23\3\0\3\23\1\0\3\23"+
    "\1\23\11\0\1\23\17\0\11\23\21\0\3\23\1\0\10\15\1\0"+
    "\3\15\1\0\27\15\1\0\12\15\1\0\5\15\4\0\3\23\4\23"+
    "\1\0\3\23\1\0\4\23\7\0\2\23\11\0\2\15\4\0\12\23"+
    "\22\0\2\23\1\0\10\15\1\0\3\15\1\0\27\15\1\0\12\15"+
    "\1\0\5\15\2\0\1\23\1\15\1\23\1\23\5\23\1\0\1\23"+
    "\2\23\1\0\2\23\2\23\7\0\2\23\7\0\1\15\1\0\2\15"+
    "\4\0\12\23\22\0\2\23\1\0\10\15\1\0\3\15\1\0\27\15"+
    "\1\0\20\15\4\0\3\23\3\23\2\0\3\23\1\0\3\23\1\23"+
    "\11\0\1\23\10\0\2\15\4\0\12\23\22\0\2\23\1\0\22\15"+
    "\3\0\30\15\1\0\11\15\1\0\1\15\2\0\7\15\3\0\1\23"+
    "\4\0\3\23\3\23\1\0\1\23\1\0\10\23\22\0\2\23\15\0"+
    "\60\15\1\23\2\15\7\23\5\0\6\15\1\15\10\23\1\0\12\23"+
    "\47\0\2\15\1\0\1\15\2\0\2\15\1\0\1\15\2\0\1\15"+
    "\6\0\4\15\1\0\7\15\1\0\3\15\1\0\1\15\1\0\1\15"+
    "\2\0\2\15\1\0\4\15\1\23\2\15\6\23\1\0\2\23\1\15"+
    "\2\0\5\15\1\0\1\15\1\0\6\23\2\0\12\23\2\0\2\15"+
    "\42\0\1\15\27\0\2\23\6\0\12\23\13\0\1\23\1\0\1\23"+
    "\1\0\1\23\4\0\2\23\10\15\1\0\42\15\6\0\16\23\1\23"+
    "\5\23\1\0\2\23\4\15\4\0\10\23\1\0\44\23\11\0\1\23"+
    "\71\0\42\15\1\0\5\15\1\0\2\15\1\0\1\23\4\23\1\23"+
    "\1\23\3\0\2\23\1\23\1\23\6\0\12\23\6\0\6\15\2\23"+
    "\2\23\106\0\46\15\12\0\51\15\7\0\132\15\5\0\104\15\5\0"+
    "\122\15\6\0\7\15\1\0\77\15\1\0\1\15\1\0\4\15\2\0"+
    "\7\15\1\0\1\15\1\0\4\15\2\0\47\15\1\0\1\15\1\0"+
    "\4\15\2\0\37\15\1\0\1\15\1\0\4\15\2\0\7\15\1\0"+
    "\1\15\1\0\4\15\2\0\7\15\1\0\7\15\1\0\27\15\1\0"+
    "\37\15\1\0\1\15\1\0\4\15\2\0\7\15\1\0\47\15\1\0"+
    "\23\15\16\0\11\23\56\0\125\15\14\0\u026c\15\2\0\10\15\12\0"+
    "\32\15\5\0\113\15\3\0\3\15\17\0\15\15\1\0\4\15\3\23"+
    "\13\0\22\15\3\23\13\0\22\15\2\23\14\0\15\15\1\0\3\15"+
    "\1\0\2\23\14\0\64\15\2\0\1\23\7\23\10\23\1\23\2\23"+
    "\13\23\3\0\1\15\4\0\1\15\1\23\2\0\12\23\41\0\3\23"+
    "\2\0\12\23\6\0\43\15\1\15\64\15\10\0\51\15\1\23\126\0"+
    "\35\15\3\0\3\23\4\23\2\23\3\23\4\0\2\23\1\23\6\23"+
    "\3\23\12\0\12\23\36\15\2\0\5\15\u038b\0\54\15\66\15\12\15"+
    "\224\0\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\7\15\4\0\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15\1\15"+
    "\1\15\1\15\6\0\10\15\10\15\6\15\2\0\6\15\2\0\10\15"+
    "\10\15\10\15\10\15\6\15\2\0\6\15\2\0\10\15\1\0\1\15"+
    "\1\0\1\15\1\0\1\15\1\0\1\15\10\15\10\15\16\15\2\0"+
    "\10\15\10\15\10\15\10\15\10\15\10\15\5\15\1\0\2\15\4\15"+
    "\1\15\1\0\1\15\3\0\3\15\1\0\2\15\4\15\1\15\3\0"+
    "\4\15\2\0\2\15\4\15\4\0\10\15\5\15\5\0\3\15\1\0"+
    "\2\15\4\15\1\15\102\0\2\23\23\0\1\23\34\0\1\15\15\0"+
    "\1\15\120\0\15\23\4\0\1\23\3\0\6\23\27\0\1\15\4\0"+
    "\1\15\2\0\1\15\3\15\2\15\3\15\1\15\1\0\1\15\3\0"+
    "\5\15\6\0\1\15\1\0\1\15\1\0\1\15\1\0\4\15\1\0"+
    "\1\15\2\15\1\0\1\15\1\15\4\15\1\15\3\0\1\15\2\15"+
    "\5\0\1\15\4\15\26\0\44\15\u0e81\0\1\15\1\15\1\15\31\0"+
    "\11\15\6\23\1\0\5\15\2\0\3\15\1\15\1\15\4\0\126\15"+
    "\2\0\2\23\2\0\2\15\1\15\1\0\132\15\1\23\3\15\1\15"+
    "\5\0\50\15\4\0\136\15\21\0\30\15\70\0\20\15\u0200\0\u19b6\15"+
    "\112\0\u51a6\15\132\0\u048d\15\u0773\0\u2ba4\15\u215c\0\u012e\15\2\0\73\15"+
    "\225\0\7\15\14\0\5\15\5\0\1\15\1\23\12\15\1\0\15\15"+
    "\1\0\5\15\1\0\1\15\1\0\2\15\1\0\2\15\1\0\154\15"+
    "\41\0\u016b\15\22\0\100\15\2\0\66\15\50\0\14\15\4\0\20\23"+
    "\20\0\4\23\17\0\2\23\30\0\3\23\40\0\5\15\1\0\207\15"+
    "\23\0\12\23\7\0\32\15\4\0\1\23\1\0\32\15\12\0\1\23"+
    "\12\15\1\15\55\15\2\15\37\15\3\0\6\15\2\0\6\15\2\0"+
    "\6\15\2\0\3\15\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\3\0\2\2\4\0\1\3\2\4\5\5"+
    "\1\6\1\5\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\11\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\5\1\25\1\3\1\26\1\27"+
    "\10\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\1\1\45"+
    "\1\12\1\13\1\46\1\47\1\23\1\24\1\45\2\46"+
    "\3\50\1\51\3\5\2\52\1\16\1\53\1\54\1\5"+
    "\1\2\1\55\1\12\1\13\1\56\1\23\1\24\1\2"+
    "\1\12\1\13\1\57\1\23\1\24\1\60\1\61\1\62"+
    "\1\15\1\46\1\63\1\64\2\65\1\66\1\65\2\67"+
    "\2\70\1\26\1\4\4\0\1\4\1\71\1\0\1\72"+
    "\1\5\1\73\5\5\1\74\2\5\3\11\1\75\3\11"+
    "\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105"+
    "\1\106\1\107\1\110\1\111\1\112\4\5\1\113\12\5"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\3\0\1\50"+
    "\1\122\2\5\6\52\2\0\1\123\1\65\1\124\1\0"+
    "\3\70\1\125\3\70\2\0\1\126\3\4\1\71\1\0"+
    "\1\127\1\130\10\5\1\11\1\131\1\132\1\0\1\131"+
    "\1\133\1\134\1\135\1\5\1\136\3\5\1\137\1\140"+
    "\2\5\1\141\4\5\1\142\2\0\1\143\1\50\1\5"+
    "\1\52\2\144\1\65\1\0\1\70\1\145\1\146\1\0"+
    "\1\145\2\0\3\5\1\147\1\150\2\5\1\0\2\151"+
    "\1\0\2\5\1\152\3\5\1\153\3\5\1\154\1\155"+
    "\1\156\6\0\1\157\3\0\2\146\3\0\1\160\3\5"+
    "\1\161\1\0\2\131\1\0\4\5\1\162\1\163\1\5"+
    "\1\164\3\0\2\144\4\0\2\145\1\0\1\165\1\166"+
    "\1\5\3\131\1\167\1\5\1\170\1\171\1\172\3\144"+
    "\3\145\1\5\1\151\1\0\1\173\2\0\1\174\4\0"+
    "\1\175\2\131\2\144\2\145";

  private static int [] zzUnpackAction() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u0323\0\u076a\0\u0323\0\u07b3\0\u07fc\0\u0845"+
    "\0\u088e\0\u08d7\0\u0323\0\u0323\0\u0323\0\u0323\0\u0920\0\u0969"+
    "\0\u0323\0\u09b2\0\u0323\0\u0323\0\u09fb\0\u0a44\0\u0a8d\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e"+
    "\0\u0d67\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323"+
    "\0\u0323\0\u0db0\0\u0df9\0\u0db0\0\u0db0\0\u0e42\0\u0323\0\u0db0"+
    "\0\u0db0\0\u0323\0\u0e8b\0\u0323\0\u0ed4\0\u0f1d\0\u0f66\0\u0323"+
    "\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u0323\0\u0323"+
    "\0\u1165\0\u11ae\0\u0323\0\u11f7\0\u11ae\0\u0323\0\u11ae\0\u11ae"+
    "\0\u1240\0\u1289\0\u1240\0\u0323\0\u1240\0\u1240\0\u12d2\0\u0323"+
    "\0\u0323\0\u0323\0\u131b\0\u0323\0\u0323\0\u1364\0\u13ad\0\u0323"+
    "\0\u13f6\0\u0323\0\u143f\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac"+
    "\0\u15f5\0\u163e\0\u1687\0\u0323\0\u16d0\0\u1719\0\u0323\0\u1762"+
    "\0\u0447\0\u17ab\0\u17f4\0\u183d\0\u1886\0\u18cf\0\u0323\0\u1918"+
    "\0\u1961\0\u19aa\0\u19f3\0\u1a3c\0\u0323\0\u1a85\0\u1ace\0\u1b17"+
    "\0\u0323\0\u0323\0\u1b60\0\u0323\0\u1ba9\0\u0323\0\u0323\0\u1bf2"+
    "\0\u0323\0\u1c3b\0\u0447\0\u0447\0\u0447\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u1d5f\0\u0323\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15"+
    "\0\u1f5e\0\u1fa7\0\u1ff0\0\u2039\0\u0323\0\u2082\0\u0323\0\u0323"+
    "\0\u0323\0\u0323\0\u20cb\0\u2114\0\u215d\0\u21a6\0\u0ed4\0\u21ef"+
    "\0\u2238\0\u2281\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u11f7"+
    "\0\u1289\0\u0323\0\u2437\0\u1364\0\u2480\0\u24c9\0\u2512\0\u255b"+
    "\0\u0323\0\u25a4\0\u25ed\0\u2636\0\u267f\0\u151a\0\u0323\0\u26c8"+
    "\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u0447\0\u0447\0\u2835\0\u287e"+
    "\0\u28c7\0\u2910\0\u2959\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u2ac6"+
    "\0\u0323\0\u2a7d\0\u2b0f\0\u0323\0\u0323\0\u0323\0\u2b58\0\u0447"+
    "\0\u2ba1\0\u2bea\0\u2c33\0\u0447\0\u0447\0\u2c7c\0\u2cc5\0\u0447"+
    "\0\u2d0e\0\u2d57\0\u2da0\0\u2de9\0\u0323\0\u2e32\0\u2e7b\0\u0323"+
    "\0\u2ec4\0\u2f0d\0\u0323\0\u2f56\0\u2f9f\0\u2fe8\0\u3031\0\u307a"+
    "\0\u30c3\0\u0323\0\u307a\0\u310c\0\u3155\0\u319e\0\u31e7\0\u3230"+
    "\0\u3279\0\u0447\0\u0447\0\u32c2\0\u330b\0\u3354\0\u339d\0\u33e6"+
    "\0\u342f\0\u3478\0\u34c1\0\u0447\0\u350a\0\u3553\0\u359c\0\u0447"+
    "\0\u35e5\0\u362e\0\u3677\0\u0323\0\u0323\0\u0ed4\0\u36c0\0\u3709"+
    "\0\u3752\0\u379b\0\u37e4\0\u382d\0\u1364\0\u3876\0\u38bf\0\u3908"+
    "\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u0447\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u0447\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd\0\u3d06"+
    "\0\u3d4f\0\u3d98\0\u0447\0\u0447\0\u3de1\0\u0447\0\u22ca\0\u23ee"+
    "\0\u3e2a\0\u3e73\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u4029"+
    "\0\u4072\0\u40bb\0\u0447\0\u0447\0\u4104\0\u414d\0\u4196\0\u41df"+
    "\0\u0447\0\u4228\0\u0447\0\u0447\0\u0447\0\u0323\0\u4271\0\u42ba"+
    "\0\u307a\0\u4303\0\u434c\0\u4395\0\u0323\0\u414d\0\u0323\0\u43de"+
    "\0\u4427\0\u0447\0\u4470\0\u44b9\0\u4502\0\u454b\0\u0447\0\u3b99"+
    "\0\u3c74\0\u3e2a\0\u3f05\0\u3fe0\0\u40bb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\2\16\1\17\1\16\1\20\1\21\1\22"+
    "\1\23\1\24\1\14\5\20\1\25\1\20\1\14\1\26"+
    "\1\27\1\20\1\30\1\20\1\31\3\25\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\20\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\20\1\61"+
    "\1\62\1\20\1\63\1\64\1\20\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\12\102\1\103\23\102\1\104\1\102\1\105"+
    "\2\102\1\106\2\102\1\107\1\102\1\110\1\111\37\102"+
    "\36\112\1\33\1\112\1\35\1\113\6\112\1\45\1\46"+
    "\37\112\4\114\1\115\1\114\4\115\2\114\7\115\2\114"+
    "\1\116\1\115\1\114\5\115\1\114\1\33\1\114\1\35"+
    "\7\114\1\45\1\46\1\117\2\115\1\120\3\114\13\115"+
    "\15\114\1\14\1\15\2\16\1\17\1\16\1\20\1\21"+
    "\1\121\1\23\2\14\5\20\1\122\1\20\1\14\1\26"+
    "\1\27\1\20\1\30\1\20\1\123\3\122\1\124\1\33"+
    "\1\125\1\35\1\36\1\37\1\126\1\41\1\42\1\127"+
    "\1\130\1\45\1\46\1\47\1\50\1\20\1\120\1\52"+
    "\1\53\1\54\1\55\1\56\1\131\1\60\1\20\1\61"+
    "\1\62\1\20\1\63\1\64\1\20\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\13\132\1\114\21\132\1\133\1\134\1\132"+
    "\1\135\5\132\1\136\1\132\1\137\1\140\3\132\1\120"+
    "\33\132\13\141\1\114\22\141\1\142\1\133\1\143\5\141"+
    "\1\144\1\141\1\145\1\146\3\141\1\114\33\141\4\114"+
    "\1\147\1\114\4\147\2\114\7\147\2\114\2\147\1\114"+
    "\5\147\1\150\1\33\1\151\1\35\1\114\1\152\1\114"+
    "\1\153\1\154\1\155\1\114\1\45\1\46\3\147\1\120"+
    "\3\114\13\147\21\114\1\156\1\114\4\156\2\114\7\156"+
    "\2\114\1\157\1\156\1\114\5\156\1\114\1\33\1\114"+
    "\1\35\4\114\1\160\2\114\1\45\1\46\1\161\2\156"+
    "\1\120\3\114\13\156\15\114\10\162\1\163\10\162\1\163"+
    "\7\162\4\163\1\164\1\33\1\165\1\35\7\162\1\45"+
    "\1\46\3\162\1\120\5\162\1\163\25\162\1\14\1\15"+
    "\2\16\1\17\1\16\1\20\1\21\1\121\1\23\2\14"+
    "\5\20\1\122\1\20\1\14\1\26\1\27\1\20\1\30"+
    "\1\20\1\123\3\122\1\124\1\33\1\125\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\20\1\120\1\52\1\166\1\54\1\55"+
    "\1\56\1\131\1\60\1\20\1\61\1\62\1\20\1\63"+
    "\1\64\1\20\1\65\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\101\112\0"+
    "\1\167\1\170\1\167\1\0\1\167\1\171\1\172\1\173"+
    "\1\174\5\0\1\171\1\172\1\173\1\174\1\0\1\175"+
    "\2\176\1\0\1\177\61\0\3\16\1\0\1\16\3\0"+
    "\1\174\10\0\1\174\1\0\1\175\2\176\1\0\1\177"+
    "\61\0\11\20\2\0\10\20\1\0\1\200\1\20\1\0"+
    "\5\20\15\0\3\20\4\0\13\20\16\0\11\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\13\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\2\20\1\201\10\20\16\0"+
    "\7\20\1\202\1\20\2\0\5\20\1\202\2\20\1\0"+
    "\2\20\1\0\1\20\4\202\1\32\1\0\1\34\12\0"+
    "\3\20\4\0\2\20\1\203\10\20\16\0\11\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\1\204\12\20\15\0\13\24\1\0\41\24\1\0\33\24"+
    "\1\0\7\20\1\202\1\20\2\0\5\20\1\202\2\20"+
    "\1\0\2\20\1\0\1\20\4\202\1\32\1\0\1\34"+
    "\12\0\3\20\4\0\2\20\1\202\10\20\16\0\3\175"+
    "\1\0\1\175\104\0\5\20\1\205\2\20\1\206\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\13\20\57\0\1\207\47\0\6\20\1\210\1\202\1\211"+
    "\2\0\5\20\1\202\2\20\1\0\2\20\1\0\1\20"+
    "\4\202\1\32\1\0\1\34\12\0\3\20\4\0\2\20"+
    "\1\202\10\20\15\0\13\212\1\0\21\212\1\213\1\214"+
    "\16\212\1\215\33\212\13\216\1\0\22\216\1\217\1\220"+
    "\15\216\1\215\33\216\42\0\1\221\110\0\1\222\52\0"+
    "\1\223\1\0\4\223\2\0\7\223\2\0\2\223\1\0"+
    "\5\223\5\0\1\224\1\225\1\0\1\226\4\0\3\223"+
    "\4\0\13\223\57\0\1\227\1\0\1\230\106\0\1\231"+
    "\2\0\1\232\44\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\1\20\1\233\1\234\4\0\1\20"+
    "\1\235\5\20\1\236\3\20\16\0\6\20\1\237\2\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\1\240"+
    "\2\20\4\0\2\20\1\241\10\20\57\0\1\242\47\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\2\20\1\243\4\0\1\20\1\244\11\20\16\0\6\20"+
    "\1\245\2\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\3\20\4\0\13\20\16\0\7\20\1\202\1\20"+
    "\2\0\5\20\1\202\2\20\1\0\1\246\1\20\1\0"+
    "\1\20\4\202\1\32\1\0\1\34\12\0\3\20\4\0"+
    "\1\247\1\20\1\202\10\20\16\0\11\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\2\20"+
    "\1\250\10\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\1\251\12\20\16\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\1\252\2\20\4\0\13\20\16\0\10\20\1\253\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\13\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\12\20\1\254\57\0\1\255"+
    "\31\0\1\256\56\0\1\257\110\0\1\260\110\0\1\261"+
    "\110\0\1\262\46\0\12\102\1\0\30\102\1\0\2\102"+
    "\1\0\42\102\13\103\1\0\41\103\1\0\33\103\4\0"+
    "\1\223\1\0\4\223\2\0\7\223\2\0\2\223\1\0"+
    "\5\223\7\0\1\263\5\0\3\223\1\0\1\264\2\0"+
    "\13\223\15\0\41\112\1\265\47\112\1\0\11\115\2\0"+
    "\1\115\1\0\5\115\2\0\2\115\1\0\5\115\4\0"+
    "\1\115\10\0\3\115\4\0\13\115\16\0\10\115\1\266"+
    "\2\0\1\115\1\0\5\115\2\0\2\115\1\0\5\115"+
    "\4\0\1\115\10\0\3\115\4\0\13\115\16\0\11\115"+
    "\2\0\1\115\1\0\5\115\2\0\2\115\1\0\5\115"+
    "\4\0\1\115\10\0\1\115\1\267\1\115\4\0\13\115"+
    "\16\0\7\20\1\270\1\20\2\0\5\20\1\270\2\20"+
    "\1\0\2\20\1\0\1\20\4\270\1\124\1\0\1\125"+
    "\12\0\3\20\4\0\2\20\1\271\10\20\16\0\7\20"+
    "\1\270\1\20\2\0\5\20\1\270\2\20\1\0\2\20"+
    "\1\0\1\20\4\270\1\124\1\0\1\125\12\0\3\20"+
    "\4\0\2\20\1\270\10\20\16\0\6\20\1\210\1\270"+
    "\1\211\2\0\5\20\1\270\2\20\1\0\2\20\1\0"+
    "\1\20\4\270\1\124\1\0\1\125\12\0\3\20\4\0"+
    "\2\20\1\270\10\20\15\0\13\272\1\0\21\272\1\273"+
    "\1\274\16\272\1\0\33\272\13\275\1\0\22\275\1\276"+
    "\1\277\15\275\1\0\33\275\42\0\1\224\1\225\1\0"+
    "\1\226\44\0\7\20\1\270\1\20\2\0\5\20\1\270"+
    "\2\20\1\0\1\246\1\20\1\0\1\20\4\270\1\124"+
    "\1\0\1\125\12\0\3\20\4\0\1\247\1\20\1\270"+
    "\10\20\15\0\13\132\1\0\21\132\1\0\1\300\7\132"+
    "\1\0\6\132\1\0\144\132\13\141\1\0\22\141\1\301"+
    "\1\0\6\141\1\0\6\141\1\0\144\141\1\0\11\147"+
    "\2\0\1\147\1\0\5\147\2\0\2\147\1\0\5\147"+
    "\4\0\1\147\10\0\3\147\4\0\13\147\62\0\1\302"+
    "\44\0\11\156\2\0\1\156\1\0\5\156\2\0\2\156"+
    "\1\0\5\156\4\0\1\156\10\0\3\156\4\0\13\156"+
    "\16\0\10\156\1\303\2\0\1\156\1\0\5\156\2\0"+
    "\2\156\1\0\5\156\4\0\1\156\10\0\3\156\4\0"+
    "\13\156\16\0\11\156\2\0\1\156\1\0\5\156\2\0"+
    "\2\156\1\0\5\156\4\0\1\156\10\0\1\156\1\304"+
    "\1\156\4\0\13\156\25\0\1\305\10\0\1\305\7\0"+
    "\4\305\1\164\1\0\1\165\23\0\1\305\25\0\13\306"+
    "\1\0\21\306\1\307\1\310\16\306\1\311\33\306\13\312"+
    "\1\0\22\312\1\313\1\314\15\312\1\311\33\312\12\0"+
    "\1\315\35\0\1\316\4\0\1\317\34\0\1\167\1\170"+
    "\1\167\1\0\1\167\3\0\1\174\10\0\1\174\1\0"+
    "\1\175\2\176\1\0\1\177\61\0\3\170\1\0\1\170"+
    "\16\0\1\175\2\176\1\0\1\177\61\0\5\320\2\0"+
    "\1\320\5\0\1\320\2\0\1\320\3\0\2\320\2\0"+
    "\2\320\20\0\1\320\5\0\1\320\30\0\1\321\1\0"+
    "\1\321\1\0\1\321\104\0\1\322\3\0\1\322\104\0"+
    "\3\175\1\0\1\175\17\0\2\176\1\0\1\177\61\0"+
    "\3\323\1\0\1\323\21\0\1\324\11\0\1\324\50\0"+
    "\10\20\1\325\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\1\20\1\326\1\20\4\0\13\20\16\0\7\20"+
    "\1\327\1\20\2\0\5\20\1\327\2\20\1\0\2\20"+
    "\1\0\1\20\4\327\1\32\1\0\1\34\12\0\3\20"+
    "\4\0\2\20\1\327\10\20\16\0\7\20\1\327\1\20"+
    "\2\0\5\20\1\327\2\20\1\0\1\330\1\20\1\0"+
    "\1\20\4\327\1\32\1\0\1\34\12\0\3\20\4\0"+
    "\2\20\1\327\10\20\16\0\11\20\2\0\10\20\1\0"+
    "\2\20\1\0\5\20\15\0\3\20\4\0\7\20\1\331"+
    "\3\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\1\20\1\332\3\20\15\0\3\20\4\0\13\20\16\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\1\333\1\20\1\334\4\0\13\20\16\0\11\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\1\20\1\335\11\20\16\0\11\20\2\0\10\20\1\0"+
    "\2\20\1\0\5\20\15\0\3\20\4\0\1\336\12\20"+
    "\15\0\13\212\1\0\21\212\1\337\1\214\16\212\1\215"+
    "\33\212\35\0\1\340\1\341\1\0\1\342\7\0\1\342"+
    "\4\0\1\215\2\0\1\215\30\0\111\212\13\216\1\0"+
    "\22\216\1\217\1\337\15\216\1\215\144\216\36\0\1\341"+
    "\1\343\1\342\7\0\1\342\4\0\1\215\2\0\1\215"+
    "\31\0\11\223\2\0\1\223\1\0\5\223\2\0\2\223"+
    "\1\0\5\223\4\0\1\223\10\0\3\223\4\0\13\223"+
    "\57\0\1\344\110\0\1\345\110\0\1\346\47\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\5\20\1\347\5\20\16\0\11\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\2\20"+
    "\1\350\10\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\1\20\1\351\11\20"+
    "\16\0\6\20\1\352\2\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\13\20\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\2\20"+
    "\1\353\4\0\13\20\16\0\3\20\1\354\5\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\13\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\3\20\1\355\7\20\16\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\3\20\4\0\3\20\1\356\7\20\16\0\11\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\1\357\2\20"+
    "\4\0\13\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\6\20\1\360\4\20"+
    "\16\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\2\20\1\361\4\0\13\20\16\0\11\20\2\0"+
    "\10\20\1\0\1\362\1\20\1\0\5\20\15\0\3\20"+
    "\4\0\13\20\16\0\6\20\1\363\2\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\13\20"+
    "\16\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\1\364\2\20\4\0\13\20\57\0\1\365\52\0"+
    "\1\366\1\0\4\366\2\0\7\366\2\0\2\366\1\0"+
    "\5\366\15\0\3\366\4\0\13\366\56\0\1\367\47\0"+
    "\45\112\1\370\43\112\1\0\11\115\2\0\1\115\1\0"+
    "\5\115\2\0\2\115\1\0\5\115\4\0\1\115\10\0"+
    "\2\115\1\371\4\0\13\115\16\0\7\20\1\372\1\20"+
    "\2\0\5\20\1\372\2\20\1\0\2\20\1\0\1\20"+
    "\4\372\1\124\1\0\1\125\12\0\3\20\4\0\2\20"+
    "\1\372\10\20\16\0\7\20\1\372\1\20\2\0\5\20"+
    "\1\372\2\20\1\0\1\330\1\20\1\0\1\20\4\372"+
    "\1\124\1\0\1\125\12\0\3\20\4\0\2\20\1\372"+
    "\10\20\15\0\13\272\1\0\21\272\1\373\1\274\16\272"+
    "\1\0\33\272\35\0\1\374\53\0\111\272\13\275\1\0"+
    "\22\275\1\276\1\373\15\275\1\0\144\275\37\0\1\375"+
    "\52\0\11\156\2\0\1\156\1\0\5\156\2\0\2\156"+
    "\1\0\5\156\4\0\1\156\10\0\2\156\1\376\4\0"+
    "\13\156\25\0\1\377\10\0\1\377\7\0\4\377\1\164"+
    "\1\0\1\165\23\0\1\377\25\0\13\306\1\0\21\306"+
    "\1\u0100\1\310\16\306\1\311\33\306\35\0\1\u0101\1\u0102"+
    "\1\0\1\u0103\7\0\1\u0103\4\0\1\311\2\0\1\311"+
    "\30\0\111\306\13\312\1\0\22\312\1\313\1\u0100\15\312"+
    "\1\311\144\312\36\0\1\u0102\1\u0104\1\u0103\7\0\1\u0103"+
    "\4\0\1\311\2\0\1\311\30\0\13\315\1\0\41\315"+
    "\1\317\33\315\1\0\5\320\2\0\1\320\1\174\4\0"+
    "\1\320\2\0\1\320\1\174\2\0\2\320\2\0\2\320"+
    "\20\0\1\320\5\0\1\320\30\0\1\321\1\0\1\321"+
    "\1\0\1\321\3\0\1\174\10\0\1\174\67\0\1\322"+
    "\3\0\1\322\3\0\1\174\10\0\1\174\67\0\3\323"+
    "\1\0\1\323\22\0\1\177\61\0\3\323\1\0\1\323"+
    "\104\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\1\u0105\1\0\1\u0106\12\0\3\20\4\0\13\20\16\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\3\20\4\0\1\u0107\12\20\16\0\7\20\1\u0108\1\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\13\20\16\0\11\20\2\0\10\20\1\0\1\u0109"+
    "\1\20\1\0\5\20\15\0\3\20\4\0\13\20\16\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\1\20\1\u010a\1\20\4\0\13\20\16\0\11\20\2\0"+
    "\10\20\1\0\1\u010b\1\20\1\0\5\20\15\0\3\20"+
    "\4\0\13\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\3\20\1\u010c\7\20"+
    "\16\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\2\20\1\u010d\4\0\13\20\53\0\1\341\1\0"+
    "\1\342\7\0\1\342\4\0\1\215\2\0\1\215\30\0"+
    "\35\340\1\u010e\1\u010f\52\340\36\343\1\u0110\1\u0111\51\343"+
    "\1\0\6\20\1\u0112\2\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\13\20\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\1\u0113\12\20\16\0\11\20\2\0\10\20\1\0"+
    "\2\20\1\0\5\20\15\0\3\20\4\0\7\20\1\u0114"+
    "\3\20\16\0\11\20\2\0\10\20\1\0\1\u0115\1\20"+
    "\1\0\5\20\15\0\3\20\4\0\13\20\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\4\20\1\u0116\15\0"+
    "\3\20\4\0\13\20\16\0\11\20\2\0\10\20\1\0"+
    "\2\20\1\0\5\20\15\0\2\20\1\u0117\4\0\13\20"+
    "\16\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\2\20\1\u0118\4\0\13\20\16\0\10\20\1\u0119"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\13\20\16\0\7\20\1\u011a\1\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\13\20"+
    "\16\0\10\20\1\u011b\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\13\20\16\0\11\366\2\0"+
    "\10\366\1\0\2\366\1\0\5\366\10\0\1\u011c\4\0"+
    "\3\366\4\0\13\366\56\0\1\u011d\50\0\11\115\2\0"+
    "\1\115\1\0\5\115\2\0\1\u011e\1\115\1\0\5\115"+
    "\4\0\1\115\10\0\3\115\4\0\13\115\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\1\u011f\1\0"+
    "\1\u0120\12\0\3\20\4\0\13\20\15\0\35\374\1\u0121"+
    "\1\u0122\52\374\36\375\1\u0123\1\u0124\51\375\1\0\11\156"+
    "\2\0\1\156\1\0\5\156\2\0\1\u0125\1\156\1\0"+
    "\5\156\4\0\1\156\10\0\3\156\4\0\13\156\52\0"+
    "\1\u0126\1\0\1\u0127\107\0\1\u0102\1\0\1\u0103\7\0"+
    "\1\u0103\4\0\1\311\2\0\1\311\30\0\35\u0101\1\u0128"+
    "\1\u0129\52\u0101\36\u0104\1\u012a\1\u012b\51\u0104\35\0\1\u012c"+
    "\112\0\1\u012d\52\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\4\20\1\u012e\6\20"+
    "\16\0\3\20\1\u012f\5\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\13\20\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\5\20\1\u0130\5\20\16\0\11\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\1\u0131\2\20\4\0"+
    "\13\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\2\20\1\u0132\4\0\13\20\15\0\35\340"+
    "\1\u0133\1\u0134\163\340\147\343\1\u0135\1\u0136\51\343\1\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\3\20\4\0\2\20\1\u0137\10\20\16\0\10\20\1\u0138"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\13\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\2\20\1\u0139\10\20"+
    "\16\0\11\20\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\3\20\4\0\2\20\1\u013a\10\20\16\0\11\20"+
    "\2\0\10\20\1\0\1\u013b\1\20\1\0\5\20\15\0"+
    "\3\20\4\0\13\20\16\0\3\20\1\u013c\5\20\2\0"+
    "\10\20\1\0\2\20\1\0\5\20\15\0\3\20\4\0"+
    "\13\20\16\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\1\u013d\12\20\16\0\11\20"+
    "\2\0\10\20\1\0\1\u013e\1\20\1\0\5\20\15\0"+
    "\3\20\4\0\13\20\52\0\1\u013f\112\0\1\u0140\51\0"+
    "\35\374\1\u0141\1\u0142\163\374\147\375\1\u0143\1\u0144\51\375"+
    "\35\0\1\u0145\112\0\1\u0146\51\0\35\u0101\1\u0147\1\u0148"+
    "\163\u0101\147\u0104\1\u0149\1\u014a\51\u0104\35\0\1\340\112\0"+
    "\1\343\52\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\1\u014b\12\20\16\0\11\20"+
    "\2\0\10\20\1\0\2\20\1\0\5\20\15\0\3\20"+
    "\4\0\3\20\1\u014c\7\20\16\0\11\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\1\20"+
    "\1\u014d\11\20\15\0\35\340\1\u014e\1\u0134\107\340\1\u014f"+
    "\1\u0134\52\340\36\343\1\u0135\1\u0150\107\343\1\u0135\1\u014e"+
    "\51\343\1\0\11\20\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\3\20\1\u0151\7\20\16\0"+
    "\10\20\1\u0152\2\0\10\20\1\0\2\20\1\0\5\20"+
    "\15\0\3\20\4\0\13\20\16\0\11\20\2\0\10\20"+
    "\1\0\2\20\1\0\5\20\15\0\3\20\4\0\3\20"+
    "\1\u0153\7\20\16\0\11\20\2\0\10\20\1\0\2\20"+
    "\1\0\5\20\15\0\3\20\4\0\1\20\1\u0154\11\20"+
    "\16\0\10\20\1\u0155\2\0\10\20\1\0\2\20\1\0"+
    "\5\20\15\0\3\20\4\0\13\20\15\0\35\374\1\u0156"+
    "\1\u0142\107\374\1\u0157\1\u0142\52\374\36\375\1\u0143\1\u0158"+
    "\107\375\1\u0143\1\u0156\51\375\35\0\1\u0101\112\0\1\u0104"+
    "\51\0\35\u0101\1\u0159\1\u0148\107\u0101\1\u015a\1\u0148\52\u0101"+
    "\36\u0104\1\u0149\1\u015b\107\u0104\1\u0149\1\u0159\51\u0104\1\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\4\20\1\u015c"+
    "\15\0\3\20\4\0\13\20\53\0\1\u015d\1\0\1\u015e"+
    "\7\0\1\u015e\4\0\1\u015f\2\0\1\u015f\30\0\35\340"+
    "\1\u0160\1\u0134\52\340\36\343\1\u0135\1\u0161\51\343\1\0"+
    "\11\20\2\0\10\20\1\0\2\20\1\0\5\20\15\0"+
    "\3\20\4\0\6\20\1\u0162\4\20\15\0\35\374\1\u0163"+
    "\1\u0142\52\374\36\375\1\u0143\1\u0164\51\375\35\u0101\1\u0165"+
    "\1\u0148\52\u0101\36\u0104\1\u0149\1\u0166\51\u0104\1\0\11\20"+
    "\2\0\10\20\1\0\1\u0167\1\20\1\0\5\20\15\0"+
    "\3\20\4\0\13\20\15\0\35\340\1\u0168\1\u0134\52\340"+
    "\36\343\1\u0135\1\u0169\51\343\35\374\1\u016a\1\u0142\52\374"+
    "\36\375\1\u0143\1\u016b\51\375\35\u0101\1\u016c\1\u0148\52\u0101"+
    "\36\u0104\1\u0149\1\u016d\51\u0104";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17812];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\3\0\2\1\4\0\1\11\16\1\1\11"+
    "\1\1\1\11\5\1\4\11\2\1\1\11\1\1\2\11"+
    "\15\1\10\11\5\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\6\1\2\11\2\1\1\11\2\1\1\11"+
    "\5\1\1\11\3\1\3\11\1\1\2\11\2\1\1\11"+
    "\1\1\1\11\5\1\4\0\1\11\1\1\1\0\1\11"+
    "\7\1\1\11\5\1\1\11\3\1\2\11\1\1\1\11"+
    "\1\1\2\11\1\1\1\11\10\1\1\11\12\1\1\11"+
    "\1\1\4\11\3\0\12\1\2\0\1\11\2\1\1\0"+
    "\3\1\1\11\3\1\2\0\1\11\4\1\1\0\14\1"+
    "\1\11\1\0\1\1\3\11\16\1\1\11\2\0\1\11"+
    "\2\1\1\11\3\1\1\0\2\1\1\11\1\0\1\1"+
    "\2\0\7\1\1\0\2\1\1\0\12\1\2\11\1\1"+
    "\6\0\1\1\3\0\2\1\3\0\5\1\1\0\2\1"+
    "\1\0\10\1\3\0\2\1\4\0\2\1\1\0\13\1"+
    "\1\11\6\1\1\11\1\0\1\11\2\0\1\1\4\0"+
    "\7\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[365];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */


private void pushState(Integer state) {
    stateStack.push(state);
}

private Integer popState() {
    return stateStack.pop();
}


int commentStartState = YYINITIAL;
int embedBraceCount = 0;

boolean inpyxltag;

Stack<String> tagStack = new Stack<String>();
Stack<Integer> stateStack = new Stack<Integer>();


private void openTag() {
    tagStack.push("Moo");
    yybegin(IN_PYXL_TAG_NAME);
}

private boolean closeTag() {
    int size = tagStack.size();
    if (size == 1) {
        tagStack.pop();
        yybegin(IN_DOCSTRING_OWNER);    // done with pyxl code.
        return true;
    } else if (size == 0) {
        yybegin(IN_DOCSTRING_OWNER);    // done with pyxl code.
        return false;   // error
    } else {
        tagStack.pop();
        yybegin(IN_PYXL_BLOCK); // back to pyxl-block state
        return true;
    }
}



private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}

// handle a right brace in a python embed
private IElementType handleRightBrace() {

    if (--embedBraceCount == 0) {
        yybegin(popState());
        return PyxlTokenTypes.EMBED_END;
    } else {
        return PyTokenTypes.SPACE;
    }
}



  PyxlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PyxlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3348) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 126: break;
        case 105: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 127: break;
        case 4: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 128: break;
        case 15: 
          { return PyTokenTypes.DIV;
          }
        case 129: break;
        case 25: 
          { return PyTokenTypes.PERC;
          }
        case 130: break;
        case 10: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 131: break;
        case 109: 
          { commentStartState = yystate(); // Remember which state we should return to after the comment
    yybegin(IN_PYXL_COMMENT);
    return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 132: break;
        case 31: 
          { return PyTokenTypes.RPAR;
          }
        case 133: break;
        case 99: 
          { yybegin(commentStartState); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 134: break;
        case 3: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 135: break;
        case 17: 
          { return PyTokenTypes.LBRACE;
          }
        case 136: break;
        case 88: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 137: break;
        case 55: 
          { yypushback(1); yybegin(YYINITIAL);
          }
        case 138: break;
        case 113: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 139: break;
        case 102: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 140: break;
        case 12: 
          { return PyTokenTypes.MINUS;
          }
        case 141: break;
        case 9: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 142: break;
        case 38: 
          { return PyxlTokenTypes.BADCHAR;
          }
        case 143: break;
        case 112: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 144: break;
        case 33: 
          { return PyTokenTypes.RBRACKET;
          }
        case 145: break;
        case 85: 
          { yypushback(getSpaceLength(yytext())); yybegin(YYINITIAL); return PyTokenTypes.DOCSTRING;
          }
        case 146: break;
        case 7: 
          { return PyTokenTypes.DOT;
          }
        case 147: break;
        case 5: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 148: break;
        case 30: 
          { return PyTokenTypes.LPAR;
          }
        case 149: break;
        case 14: 
          { return PyTokenTypes.LT;
          }
        case 150: break;
        case 74: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 151: break;
        case 114: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 152: break;
        case 93: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 153: break;
        case 19: 
          { return PyTokenTypes.SPACE;
          }
        case 154: break;
        case 39: 
          { pushState(IN_PYXL_BLOCK); embedBraceCount++; yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 155: break;
        case 118: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 156: break;
        case 58: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 157: break;
        case 42: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 158: break;
        case 43: 
          { embedBraceCount++; return PyTokenTypes.LBRACE;
          }
        case 159: break;
        case 46: 
          { pushState(ATTR_VALUE_1Q); embedBraceCount++; yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 160: break;
        case 83: 
          { return closeTag() ? PyxlTokenTypes.TAGENDANDCLOSE : PyxlTokenTypes.BADCHAR;
          }
        case 161: break;
        case 51: 
          { yybegin(IN_PYXL_BLOCK); return PyxlTokenTypes.TAGEND;
          }
        case 162: break;
        case 20: 
          { return PyTokenTypes.FORMFEED;
          }
        case 163: break;
        case 23: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 164: break;
        case 16: 
          { return PyTokenTypes.GT;
          }
        case 165: break;
        case 32: 
          { return PyTokenTypes.LBRACKET;
          }
        case 166: break;
        case 22: 
          { return PyTokenTypes.COLON;
          }
        case 167: break;
        case 108: 
          { yybegin(IN_CLOSE_TAG); yypushback(yylength()-2); return PyxlTokenTypes.TAGCLOSE_START;
          }
        case 168: break;
        case 84: 
          { return PyxlTokenTypes.IFTAG;
          }
        case 169: break;
        case 91: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 170: break;
        case 104: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 171: break;
        case 27: 
          { return PyTokenTypes.OR;
          }
        case 172: break;
        case 90: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 yybegin(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 173: break;
        case 2: 
          { return PyxlTokenTypes.ATTRVALUE;
          }
        case 174: break;
        case 89: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 175: break;
        case 76: 
          { return PyTokenTypes.MULTEQ;
          }
        case 176: break;
        case 124: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 177: break;
        case 116: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 178: break;
        case 53: 
          { return PyxlTokenTypes.TAGNAME;
          }
        case 179: break;
        case 54: 
          { yybegin(IN_PYXL_BLOCK); return closeTag() ? PyxlTokenTypes.TAGCLOSE_END : PyxlTokenTypes.BADCHAR;
          }
        case 180: break;
        case 24: 
          { return PyTokenTypes.MULT;
          }
        case 181: break;
        case 120: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 182: break;
        case 47: 
          { pushState(ATTR_VALUE_2Q);embedBraceCount++; yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 183: break;
        case 69: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 184: break;
        case 122: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 185: break;
        case 56: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 186: break;
        case 49: 
          { yybegin(ATTR_VALUE_1Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 187: break;
        case 117: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 188: break;
        case 45: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.ATTRVALUE_END;
          }
        case 189: break;
        case 111: 
          { return PyxlTokenTypes.ELSETAG;
          }
        case 190: break;
        case 81: 
          { return PyTokenTypes.XOREQ;
          }
        case 191: break;
        case 94: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 192: break;
        case 34: 
          { return PyTokenTypes.AT;
          }
        case 193: break;
        case 96: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 194: break;
        case 8: 
          { return PyTokenTypes.PLUS;
          }
        case 195: break;
        case 62: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 196: break;
        case 75: 
          { return PyTokenTypes.NE;
          }
        case 197: break;
        case 35: 
          { return PyTokenTypes.COMMA;
          }
        case 198: break;
        case 50: 
          { yybegin(ATTR_VALUE_2Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 199: break;
        case 77: 
          { return PyTokenTypes.EXP;
          }
        case 200: break;
        case 63: 
          { return PyTokenTypes.EQEQ;
          }
        case 201: break;
        case 36: 
          { return PyTokenTypes.TICK;
          }
        case 202: break;
        case 1: 
          { return PyxlTokenTypes.STRING;
          }
        case 203: break;
        case 100: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 204: break;
        case 44: 
          { return handleRightBrace();
          }
        case 205: break;
        case 125: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 206: break;
        case 82: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.IFTAG;
          }
        case 207: break;
        case 66: 
          { return PyTokenTypes.LTLT;
          }
        case 208: break;
        case 65: 
          { return PyTokenTypes.LE;
          }
        case 209: break;
        case 95: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 210: break;
        case 40: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.TAGNAME;
          }
        case 211: break;
        case 48: 
          { return PyxlTokenTypes.ATTRNAME;
          }
        case 212: break;
        case 59: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 213: break;
        case 6: 
          { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 214: break;
        case 61: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 215: break;
        case 107: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 216: break;
        case 86: 
          { yypushback(yylength()-1); yybegin(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 217: break;
        case 37: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 218: break;
        case 123: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 219: break;
        case 80: 
          { return PyTokenTypes.OREQ;
          }
        case 220: break;
        case 71: 
          { return PyTokenTypes.GTGT;
          }
        case 221: break;
        case 26: 
          { return PyTokenTypes.AND;
          }
        case 222: break;
        case 68: 
          { return PyTokenTypes.DIVEQ;
          }
        case 223: break;
        case 121: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 224: break;
        case 119: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 225: break;
        case 70: 
          { return PyTokenTypes.GE;
          }
        case 226: break;
        case 60: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 227: break;
        case 101: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else yybegin(YYINITIAL); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 228: break;
        case 73: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 229: break;
        case 92: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 230: break;
        case 57: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 231: break;
        case 41: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 232: break;
        case 78: 
          { return PyTokenTypes.PERCEQ;
          }
        case 233: break;
        case 110: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.ELSETAG;
          }
        case 234: break;
        case 97: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 235: break;
        case 79: 
          { return PyTokenTypes.ANDEQ;
          }
        case 236: break;
        case 64: 
          { openTag(); yypushback(yylength()-1); return PyxlTokenTypes.TAGBEGIN;
          }
        case 237: break;
        case 13: 
          { return PyTokenTypes.EQ;
          }
        case 238: break;
        case 106: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 239: break;
        case 21: 
          { if (zzCurrentPos == 0) yybegin(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
          }
        case 240: break;
        case 98: 
          { return PyTokenTypes.EXPEQ;
          }
        case 241: break;
        case 103: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 242: break;
        case 18: 
          { return PyTokenTypes.RBRACE;
          }
        case 243: break;
        case 72: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 244: break;
        case 11: 
          { return PyTokenTypes.TAB;
          }
        case 245: break;
        case 67: 
          { return PyTokenTypes.NE_OLD;
          }
        case 246: break;
        case 29: 
          { return PyTokenTypes.TILDE;
          }
        case 247: break;
        case 52: 
          { pushState(IN_ATTR); embedBraceCount++; yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 248: break;
        case 87: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 249: break;
        case 28: 
          { return PyTokenTypes.XOR;
          }
        case 250: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
