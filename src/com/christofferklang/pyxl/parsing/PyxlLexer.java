/* The following code was generated by JFlex 1.4.3 on 7/27/14 10:50 PM */

package com.christofferklang.pyxl.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.christofferklang.pyxl.PyxlTokenTypes;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;
import com.intellij.psi.tree.IElementType;


// NOTE: JFlex lexer file is defined in http://www.jflex.de/manual.pdf


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/27/14 10:50 PM from the specification file
 * <tt>C:/Users/Christoffer/code/pycharm-pyxl/src/com/christofferklang/pyxl/parsing/Pyxl.flex</tt>
 */
class PyxlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PENDING_PYXL_TAG_FROM_PYXL = 12;
  public static final int PENDING_DOCSTRING = 26;
  public static final int IN_PYXL_PYTHON_EMBED = 8;
  public static final int IN_PYXL_TAG_NAME = 6;
  public static final int IN_ATTRVALUE = 22;
  public static final int ATTR_VALUE_2Q = 18;
  public static final int IN_PYXL_BLOCK = 4;
  public static final int IN_CLOSE_TAG = 24;
  public static final int IN_PYXL_DOCUMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 28;
  public static final int IN_ATTR = 20;
  public static final int ATTR_VALUE_1Q = 16;
  public static final int PENDING_PYXL_TAG_FROM_PYTHON = 10;
  public static final int ATTR_VALUE_UNQUOTED = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\46\1\0\1\66\1\13\22\0\1\63\1\61\1\44"+
    "\1\12\1\0\1\77\1\100\1\42\1\104\1\105\1\76\1\35\1\50"+
    "\1\47\1\32\1\57\1\1\1\5\6\3\2\2\1\22\1\71\1\56"+
    "\1\64\1\60\1\0\1\110\1\25\1\27\1\37\1\25\1\34\1\25"+
    "\3\23\1\36\1\23\1\30\2\23\1\7\2\23\1\40\2\23\1\40"+
    "\2\23\1\26\2\23\1\106\1\43\1\107\1\102\1\23\1\62\1\4"+
    "\1\10\1\14\1\16\1\33\1\70\1\21\1\75\1\17\1\36\1\72"+
    "\1\11\1\73\1\20\1\15\1\51\1\23\1\52\1\54\1\53\1\41"+
    "\1\23\1\74\1\6\1\55\1\23\1\65\1\101\1\67\1\103\53\0"+
    "\1\24\12\0\1\24\4\0\1\24\5\0\27\24\1\0\7\24\30\24"+
    "\1\0\10\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\3\24\2\24\1\24\1\24\1\24"+
    "\2\24\1\24\3\24\2\24\4\24\1\24\2\24\1\24\3\24\3\24"+
    "\2\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\2\24\1\24\1\24\2\24\1\24\3\24\1\24\1\24\1\24"+
    "\2\24\2\24\1\24\1\24\3\24\4\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\1\24\1\24\1\24\3\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\7\24\2\24\1\24\2\24\2\24\1\24\1\24"+
    "\4\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\105\24"+
    "\1\24\33\24\22\24\4\0\14\24\16\0\5\24\7\0\1\24\1\0"+
    "\1\24\21\0\160\31\1\24\1\24\1\24\1\24\1\24\1\0\1\24"+
    "\1\24\2\0\1\24\3\24\10\0\1\24\1\0\3\24\1\0\1\24"+
    "\1\0\2\24\1\24\21\24\1\0\11\24\43\24\1\24\2\24\3\24"+
    "\3\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\5\24\1\24\1\24\1\0\1\24\1\24"+
    "\2\24\2\24\63\24\60\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\0\5\31"+
    "\2\0\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\11\0\46\24\2\0"+
    "\1\24\7\0\47\24\11\0\55\31\1\0\1\31\1\0\2\31\1\0"+
    "\2\31\1\0\1\31\10\0\33\24\5\0\3\24\35\0\13\31\5\0"+
    "\40\24\1\24\12\24\25\31\12\31\4\0\2\24\1\31\143\24\1\0"+
    "\1\24\7\31\2\0\6\31\2\24\2\31\1\0\4\31\2\24\12\31"+
    "\3\24\2\0\1\24\20\0\1\24\1\31\36\24\33\31\2\0\131\24"+
    "\13\31\1\24\16\0\12\31\41\24\11\31\2\24\4\0\1\24\5\0"+
    "\26\24\4\31\1\24\11\31\1\24\3\31\1\24\5\31\22\0\31\24"+
    "\3\31\244\0\3\31\1\31\66\24\1\31\1\31\1\31\1\24\3\31"+
    "\10\31\4\31\1\31\2\31\1\24\7\31\12\24\2\31\2\0\12\31"+
    "\1\0\1\24\6\24\1\0\7\24\1\0\1\31\2\31\1\0\10\24"+
    "\2\0\2\24\2\0\26\24\1\0\7\24\1\0\1\24\3\0\4\24"+
    "\2\0\1\31\1\24\3\31\4\31\2\0\2\31\2\0\2\31\1\31"+
    "\1\24\10\0\1\31\4\0\2\24\1\0\3\24\2\31\2\0\12\31"+
    "\2\24\17\0\2\31\1\31\1\0\6\24\4\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\2\24\1\0\2\24\2\0\1\31"+
    "\1\0\3\31\2\31\4\0\2\31\2\0\3\31\3\0\1\31\7\0"+
    "\4\24\1\0\1\24\7\0\12\31\2\31\3\24\1\31\13\0\2\31"+
    "\1\31\1\0\11\24\1\0\3\24\1\0\26\24\1\0\7\24\1\0"+
    "\2\24\1\0\5\24\2\0\1\31\1\24\3\31\5\31\1\0\2\31"+
    "\1\31\1\0\2\31\1\31\2\0\1\24\17\0\2\24\2\31\2\0"+
    "\12\31\21\0\1\31\2\31\1\0\10\24\2\0\2\24\2\0\26\24"+
    "\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\31\1\24\1\31"+
    "\1\31\1\31\4\31\2\0\2\31\2\0\2\31\1\31\10\0\1\31"+
    "\1\31\4\0\2\24\1\0\3\24\2\31\2\0\12\31\1\0\1\24"+
    "\20\0\1\31\1\24\1\0\6\24\3\0\3\24\1\0\4\24\3\0"+
    "\2\24\1\0\1\24\1\0\2\24\3\0\2\24\3\0\3\24\3\0"+
    "\14\24\4\0\2\31\1\31\2\31\3\0\3\31\1\0\3\31\1\31"+
    "\2\0\1\24\6\0\1\31\16\0\12\31\21\0\3\31\1\0\10\24"+
    "\1\0\3\24\1\0\27\24\1\0\12\24\1\0\5\24\3\0\1\24"+
    "\3\31\4\31\1\0\3\31\1\0\4\31\7\0\2\31\1\0\2\24"+
    "\6\0\2\24\2\31\2\0\12\31\22\0\2\31\1\0\10\24\1\0"+
    "\3\24\1\0\27\24\1\0\12\24\1\0\5\24\2\0\1\31\1\24"+
    "\1\31\1\31\5\31\1\0\1\31\2\31\1\0\2\31\2\31\7\0"+
    "\2\31\7\0\1\24\1\0\2\24\2\31\2\0\12\31\1\0\2\24"+
    "\17\0\2\31\1\0\10\24\1\0\3\24\1\0\51\24\2\0\1\24"+
    "\3\31\4\31\1\0\3\31\1\0\3\31\1\31\1\24\10\0\1\31"+
    "\10\0\2\24\2\31\2\0\12\31\12\0\6\24\2\0\2\31\1\0"+
    "\22\24\3\0\30\24\1\0\11\24\1\0\1\24\2\0\7\24\3\0"+
    "\1\31\4\0\3\31\3\31\1\0\1\31\1\0\10\31\22\0\2\31"+
    "\15\0\60\24\1\31\2\24\7\31\5\0\6\24\1\24\10\31\1\0"+
    "\12\31\47\0\2\24\1\0\1\24\2\0\2\24\1\0\1\24\2\0"+
    "\1\24\6\0\4\24\1\0\7\24\1\0\3\24\1\0\1\24\1\0"+
    "\1\24\2\0\2\24\1\0\4\24\1\31\2\24\6\31\1\0\2\31"+
    "\1\24\2\0\5\24\1\0\1\24\1\0\6\31\2\0\12\31\2\0"+
    "\2\24\42\0\1\24\27\0\2\31\6\0\12\31\13\0\1\31\1\0"+
    "\1\31\1\0\1\31\4\0\2\31\10\24\1\0\44\24\4\0\16\31"+
    "\1\31\5\31\1\0\2\31\5\24\13\31\1\0\44\31\11\0\1\31"+
    "\71\0\53\24\2\31\4\31\1\31\6\31\1\31\2\31\2\31\2\31"+
    "\1\24\12\31\6\0\6\24\2\31\2\31\4\24\3\31\1\24\3\31"+
    "\2\24\7\31\3\24\4\31\15\24\1\31\2\31\2\31\6\31\1\31"+
    "\1\24\1\31\12\31\3\31\1\31\2\0\46\24\12\0\53\24\1\0"+
    "\1\24\3\0\u0149\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0"+
    "\4\24\2\0\51\24\1\0\4\24\2\0\41\24\1\0\4\24\2\0"+
    "\7\24\1\0\1\24\1\0\4\24\2\0\17\24\1\0\71\24\1\0"+
    "\4\24\2\0\103\24\2\0\3\31\40\0\20\24\20\0\125\24\14\0"+
    "\u026c\24\2\0\21\24\1\0\32\24\5\0\113\24\3\0\3\24\17\0"+
    "\15\24\1\0\4\24\3\31\13\0\22\24\3\31\13\0\22\24\2\31"+
    "\14\0\15\24\1\0\3\24\1\0\2\31\14\0\64\24\2\0\1\31"+
    "\7\31\10\31\1\31\2\31\13\31\3\0\1\24\4\0\1\24\1\31"+
    "\2\0\12\31\41\0\3\31\2\0\12\31\6\0\43\24\1\24\64\24"+
    "\10\0\51\24\1\31\1\24\5\0\106\24\12\0\35\24\3\0\3\31"+
    "\4\31\2\31\3\31\4\0\2\31\1\31\6\31\3\31\12\0\12\31"+
    "\36\24\2\0\5\24\13\0\54\24\4\0\21\31\7\24\2\31\6\0"+
    "\12\31\46\0\27\24\2\31\3\31\4\0\65\24\1\31\1\31\1\31"+
    "\7\31\1\0\1\31\1\31\1\31\2\31\10\31\6\31\12\31\2\0"+
    "\1\31\12\31\6\0\12\31\15\0\1\24\130\0\4\31\1\31\57\24"+
    "\1\31\1\31\5\31\1\31\1\31\5\31\1\31\2\31\7\24\4\0"+
    "\12\31\21\0\11\31\14\0\2\31\1\31\36\24\1\31\4\31\2\31"+
    "\2\31\1\31\3\0\2\24\12\31\6\0\46\24\1\31\1\31\2\31"+
    "\3\31\1\31\1\31\3\31\2\31\14\0\44\24\10\31\10\31\2\31"+
    "\2\31\10\0\12\31\3\0\3\24\12\31\36\24\6\24\122\0\3\31"+
    "\1\0\15\31\1\31\7\31\4\24\1\31\4\24\1\31\15\0\54\24"+
    "\66\24\26\24\1\24\42\24\45\24\47\31\25\0\4\31\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\11\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\11\24\10\24\6\24\2\0\6\24"+
    "\2\0\10\24\10\24\10\24\10\24\6\24\2\0\6\24\2\0\10\24"+
    "\1\0\1\24\1\0\1\24\1\0\1\24\1\0\1\24\10\24\10\24"+
    "\16\24\2\0\10\24\10\24\10\24\10\24\10\24\10\24\5\24\1\0"+
    "\2\24\4\24\1\24\1\0\1\24\3\0\3\24\1\0\2\24\4\24"+
    "\1\24\3\0\4\24\2\0\2\24\4\24\4\0\10\24\5\24\5\0"+
    "\3\24\1\0\2\24\4\24\1\24\102\0\2\31\23\0\1\31\34\0"+
    "\1\24\15\0\1\24\20\0\15\24\63\0\15\31\4\0\1\31\3\0"+
    "\14\31\21\0\1\24\4\0\1\24\2\0\1\24\3\24\2\24\3\24"+
    "\1\24\1\0\1\24\3\0\5\24\6\0\1\24\1\0\1\24\1\0"+
    "\1\24\1\0\4\24\1\0\1\24\4\24\1\24\4\24\1\24\2\0"+
    "\2\24\2\24\5\0\1\24\4\24\4\0\1\24\21\0\43\24\1\24"+
    "\1\24\4\24\u0a77\0\57\24\1\0\57\24\1\0\1\24\1\24\3\24"+
    "\2\24\1\24\1\24\1\24\1\24\1\24\1\24\4\24\1\24\1\24"+
    "\2\24\1\24\7\24\1\24\3\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\6\0\1\24\1\24\1\24\1\24\3\31"+
    "\16\0\46\24\12\0\66\24\11\0\1\24\17\0\1\31\27\24\11\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0\7\24\1\0"+
    "\7\24\1\0\7\24\1\0\7\24\1\0\40\31\57\0\1\24\u01d5\0"+
    "\1\24\1\24\1\24\31\0\11\24\6\31\1\0\5\24\2\0\3\24"+
    "\1\24\1\24\4\0\126\24\2\0\2\31\2\0\2\24\1\24\1\0"+
    "\132\24\1\0\3\24\1\24\5\0\51\24\3\0\136\24\21\0\33\24"+
    "\65\0\20\24\u0200\0\u19b6\24\112\0\u51cc\24\64\0\25\24\1\24\u0477\24"+
    "\103\0\50\24\6\24\2\0\u010c\24\1\24\3\0\20\24\12\31\2\24"+
    "\24\0\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\31\14\0"+
    "\2\31\1\0\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\10\0\106\24\12\24"+
    "\2\31\45\0\11\24\2\0\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\3\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\10\24\1\24\1\24\1\24\1\24\2\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\0\1\24\1\24"+
    "\1\24\1\24\1\0\1\24\1\24\16\0\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\120\0\1\24\7\24\1\31"+
    "\3\24\1\31\4\24\1\31\27\24\2\31\2\31\1\31\30\0\64\24"+
    "\14\0\2\31\62\24\20\31\1\31\13\0\12\31\6\0\22\31\6\24"+
    "\3\0\1\24\4\0\12\31\34\24\10\31\2\0\27\24\13\31\2\31"+
    "\14\0\35\24\3\0\3\31\1\31\57\24\1\31\2\31\4\31\2\31"+
    "\1\31\4\31\16\0\1\24\12\31\46\0\51\24\6\31\2\31\2\31"+
    "\2\31\2\31\11\0\3\24\1\31\10\24\1\31\1\31\2\0\12\31"+
    "\6\0\20\24\1\24\6\24\3\0\1\24\1\31\4\0\60\24\1\31"+
    "\1\24\3\31\2\24\2\31\5\24\2\31\1\24\1\31\1\24\30\0"+
    "\2\24\1\24\43\0\6\24\2\0\6\24\2\0\6\24\11\0\7\24"+
    "\1\0\7\24\221\0\43\24\2\31\1\31\2\31\1\31\2\31\1\0"+
    "\1\31\1\31\2\0\12\31\6\0\u2ba4\24\14\0\27\24\4\0\61\24"+
    "\u2104\0\u012e\24\2\0\76\24\2\0\152\24\46\0\7\24\14\0\5\24"+
    "\5\0\1\24\1\31\12\24\1\0\15\24\1\0\5\24\1\0\1\24"+
    "\1\0\2\24\1\0\2\24\1\0\154\24\41\0\u016b\24\22\0\100\24"+
    "\2\0\66\24\50\0\14\24\4\0\20\31\20\0\7\31\14\0\2\31"+
    "\30\0\3\31\40\0\5\24\1\0\207\24\23\0\12\31\7\0\32\24"+
    "\4\0\1\31\1\0\32\24\13\0\12\24\1\24\55\24\2\24\37\24"+
    "\3\0\6\24\2\0\6\24\2\0\6\24\2\0\3\24\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\3\0\1\1\1\2\2\3\5\0\1\4"+
    "\2\5\4\6\1\7\6\6\1\10\1\6\1\11\1\6"+
    "\1\12\1\13\1\14\1\13\1\15\1\16\1\17\1\20"+
    "\4\6\1\21\1\22\1\23\1\4\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\6\1\32\1\6\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\7\1\10\1\6\1\20\3\6\1\23\1\26"+
    "\1\27\1\41\1\43\1\1\1\46\1\14\1\15\1\47"+
    "\1\25\1\50\1\30\1\51\3\52\1\53\3\6\2\54"+
    "\1\6\1\55\1\56\1\6\1\47\1\51\1\2\1\14"+
    "\1\15\1\30\1\3\1\57\1\14\1\15\1\25\1\30"+
    "\1\3\1\14\1\15\1\25\1\30\1\60\1\51\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\3\67\1\70\2\71"+
    "\2\72\1\10\1\5\4\0\1\5\1\73\1\0\1\74"+
    "\5\6\1\7\1\0\2\6\1\75\1\6\1\76\1\77"+
    "\1\100\5\6\1\101\3\13\1\102\3\13\1\103\6\6"+
    "\1\104\1\105\1\106\1\107\1\110\1\111\1\112\1\113"+
    "\1\114\5\6\1\115\1\116\1\117\1\120\1\121\1\122"+
    "\1\0\1\123\4\6\2\0\1\124\1\52\2\6\6\54"+
    "\2\0\1\125\1\126\1\67\1\0\3\72\1\127\3\72"+
    "\1\0\1\130\1\0\3\5\1\73\1\0\1\131\4\6"+
    "\1\7\1\0\2\6\1\132\1\133\1\6\1\134\4\6"+
    "\1\13\1\135\1\136\1\0\1\135\4\6\1\137\1\6"+
    "\1\140\1\141\1\142\1\143\4\6\1\144\4\6\2\0"+
    "\1\52\1\6\1\54\2\145\1\67\1\0\1\72\1\146"+
    "\1\147\1\0\1\146\1\130\1\6\2\0\2\6\1\7"+
    "\1\0\5\6\1\150\1\151\1\0\2\152\1\0\1\153"+
    "\5\6\1\154\1\155\1\6\1\151\3\6\1\156\12\0"+
    "\2\147\1\0\1\6\2\0\1\157\1\6\1\7\1\0"+
    "\1\160\4\6\1\0\2\135\1\0\1\161\1\162\1\6"+
    "\1\163\1\6\1\161\1\6\1\163\4\0\2\145\4\0"+
    "\2\146\1\0\1\164\1\165\1\7\1\0\1\6\1\166"+
    "\1\167\1\170\3\135\1\171\1\6\1\171\1\0\3\145"+
    "\3\146\1\7\1\0\1\6\1\152\1\0\1\172\2\0"+
    "\1\173\1\46\4\0\1\174\1\0\1\175\2\135\2\145"+
    "\2\146\1\174";

  private static int [] zzUnpackAction() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0447\0\u0845\0\u088e"+
    "\0\u08d7\0\u0920\0\u0969\0\u0447\0\u09b2\0\u0447\0\u0447\0\u09fb"+
    "\0\u0447\0\u0a44\0\u0a8d\0\u0ad6\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa"+
    "\0\u0c43\0\u0447\0\u0447\0\u0c8c\0\u0447\0\u0447\0\u0447\0\u0cd5"+
    "\0\u0447\0\u0d1e\0\u0d67\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0447"+
    "\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0ed4\0\u0f1d\0\u0f66"+
    "\0\u0f1d\0\u0faf\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u0f1d\0\u0f1d"+
    "\0\u0f1d\0\u111c\0\u1165\0\u111c\0\u111c\0\u11ae\0\u111c\0\u0447"+
    "\0\u111c\0\u0447\0\u11f7\0\u1240\0\u1289\0\u0447\0\u12d2\0\u131b"+
    "\0\u1364\0\u13ad\0\u13f6\0\u143f\0\u0f1d\0\u0447\0\u1488\0\u0b68"+
    "\0\u11ae\0\u14d1\0\u14d1\0\u14d1\0\u14d1\0\u151a\0\u0447\0\u1563"+
    "\0\u151a\0\u151a\0\u151a\0\u15ac\0\u15f5\0\u15ac\0\u15ac\0\u15ac"+
    "\0\u163e\0\u1687\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u16d0\0\u1719\0\u1762\0\u0447\0\u0447\0\u17ab\0\u17f4\0\u183d"+
    "\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u19f3\0\u0447\0\u1a3c"+
    "\0\u1a85\0\u0447\0\u1ace\0\u1b17\0\u1b60\0\u1ba9\0\u1bf2\0\u1c3b"+
    "\0\u1c84\0\u1ccd\0\u1d16\0\u056b\0\u1d5f\0\u056b\0\u056b\0\u056b"+
    "\0\u1da8\0\u1df1\0\u1e3a\0\u1e83\0\u1ecc\0\u0447\0\u1f15\0\u1f5e"+
    "\0\u1fa7\0\u0447\0\u1ff0\0\u2039\0\u2082\0\u0447\0\u20cb\0\u2114"+
    "\0\u215d\0\u21a6\0\u21ef\0\u2238\0\u2281\0\u0447\0\u0447\0\u22ca"+
    "\0\u0447\0\u2313\0\u0447\0\u0447\0\u0447\0\u235c\0\u23a5\0\u23ee"+
    "\0\u2437\0\u2480\0\u0447\0\u24c9\0\u0447\0\u0447\0\u0447\0\u0447"+
    "\0\u0f1d\0\u0447\0\u2512\0\u255b\0\u25a4\0\u25ed\0\u2636\0\u267f"+
    "\0\u11f7\0\u26c8\0\u2711\0\u275a\0\u27a3\0\u27ec\0\u2835\0\u287e"+
    "\0\u28c7\0\u2910\0\u1563\0\u15f5\0\u0447\0\u16d0\0\u2959\0\u29a2"+
    "\0\u29eb\0\u2a34\0\u2a7d\0\u0447\0\u2ac6\0\u2b0f\0\u2b58\0\u2ba1"+
    "\0\u0f1d\0\u1886\0\u2bea\0\u2c33\0\u2c7c\0\u2cc5\0\u2d0e\0\u056b"+
    "\0\u2d57\0\u2da0\0\u2de9\0\u2e32\0\u2e7b\0\u2ec4\0\u2f0d\0\u2f56"+
    "\0\u056b\0\u056b\0\u2f9f\0\u056b\0\u2fe8\0\u3031\0\u307a\0\u30c3"+
    "\0\u310c\0\u3155\0\u0447\0\u310c\0\u319e\0\u31e7\0\u3230\0\u3279"+
    "\0\u32c2\0\u056b\0\u330b\0\u0447\0\u0447\0\u0447\0\u056b\0\u3354"+
    "\0\u339d\0\u33e6\0\u342f\0\u0447\0\u3478\0\u34c1\0\u350a\0\u3553"+
    "\0\u359c\0\u35e5\0\u362e\0\u3677\0\u0447\0\u36c0\0\u3709\0\u3752"+
    "\0\u379b\0\u37e4\0\u382d\0\u0447\0\u37e4\0\u3876\0\u0447\0\u38bf"+
    "\0\u3908\0\u3951\0\u399a\0\u39e3\0\u3a2c\0\u3a75\0\u3abe\0\u3b07"+
    "\0\u3b50\0\u3b99\0\u3be2\0\u056b\0\u056b\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u3d06\0\u056b\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u056b"+
    "\0\u056b\0\u3ebc\0\u3f05\0\u3f4e\0\u3f97\0\u3fe0\0\u0447\0\u4029"+
    "\0\u4072\0\u40bb\0\u4104\0\u414d\0\u4196\0\u41df\0\u4228\0\u4271"+
    "\0\u42ba\0\u4303\0\u434c\0\u4395\0\u43de\0\u4427\0\u4470\0\u056b"+
    "\0\u44b9\0\u4502\0\u454b\0\u056b\0\u4594\0\u45dd\0\u4626\0\u466f"+
    "\0\u46b8\0\u4701\0\u474a\0\u4793\0\u056b\0\u056b\0\u47dc\0\u056b"+
    "\0\u4825\0\u3f05\0\u486e\0\u3f05\0\u48b7\0\u27ec\0\u2910\0\u4900"+
    "\0\u4949\0\u4992\0\u49db\0\u4a24\0\u4a6d\0\u4ab6\0\u4aff\0\u4b48"+
    "\0\u4b91\0\u056b\0\u056b\0\u4bda\0\u4c23\0\u4c6c\0\u056b\0\u056b"+
    "\0\u056b\0\u4cb5\0\u4cfe\0\u4d47\0\u056b\0\u4d90\0\u3f05\0\u4dd9"+
    "\0\u0447\0\u4e22\0\u4e6b\0\u37e4\0\u4eb4\0\u4efd\0\u4f46\0\u4f8f"+
    "\0\u4fd8\0\u0447\0\u4cb5\0\u0447\0\u5021\0\u506a\0\u056b\0\u0447"+
    "\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220\0\u056b\0\u46b8"+
    "\0\u4793\0\u4900\0\u49db\0\u4ab6\0\u4b91\0\u5269";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\20\1\21\2\22\1\23\1\22\2\24\1\25\1\26"+
    "\1\27\1\20\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\4\24\1\37\1\24\1\20\1\40\1\41\1\24"+
    "\1\42\1\24\3\37\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\24\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\2\24\1\72\1\24\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\1\20\1\21\2\22\1\23\1\22\2\24\1\25"+
    "\1\26\1\106\1\20\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\107\4\24\1\37\1\24\1\20\1\40\1\110"+
    "\1\24\1\42\1\24\3\37\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\111\1\112\1\113\1\54\1\24\1\114"+
    "\1\56\1\57\1\115\1\61\1\62\1\63\1\116\1\117"+
    "\1\66\1\67\1\70\1\71\2\24\1\72\1\24\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\120\1\102\1\121"+
    "\1\104\1\105\12\122\1\123\30\122\1\124\1\122\1\125"+
    "\10\122\1\126\4\122\1\127\1\122\1\130\1\131\22\122"+
    "\4\132\1\133\1\132\4\133\2\132\3\133\1\134\2\133"+
    "\1\132\6\133\2\132\1\135\1\133\1\132\4\133\1\132"+
    "\1\44\1\132\1\46\1\136\2\132\5\133\5\132\1\63"+
    "\2\132\1\66\1\132\1\133\1\132\4\133\13\132\1\20"+
    "\1\21\2\22\1\23\1\22\2\24\1\137\1\26\1\123"+
    "\1\20\1\140\1\31\1\32\1\33\1\34\1\35\1\107"+
    "\4\24\1\141\1\24\1\20\1\40\1\110\1\24\1\42"+
    "\1\24\3\141\1\142\1\44\1\143\1\46\1\136\1\50"+
    "\1\111\1\112\1\144\1\54\1\24\1\114\1\56\1\57"+
    "\1\115\1\61\1\62\1\63\1\116\1\145\1\66\1\146"+
    "\1\70\1\71\2\24\1\72\1\24\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\120\1\102\1\121\1\104\1\105"+
    "\1\20\1\21\2\22\1\23\1\22\2\24\1\137\1\26"+
    "\1\123\1\20\1\140\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\4\24\1\141\1\24\1\20\1\40\1\41\1\24"+
    "\1\42\1\24\3\141\1\142\1\44\1\143\1\46\1\136"+
    "\1\50\1\51\1\52\1\147\1\54\1\24\1\55\1\150"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\71\2\24\1\72\1\24\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104"+
    "\1\105\12\122\1\123\30\122\1\124\1\122\1\125\10\122"+
    "\1\151\4\122\1\127\1\122\1\130\1\131\22\122\13\152"+
    "\1\132\26\152\1\132\1\153\1\132\1\154\1\136\7\152"+
    "\1\132\1\152\1\132\1\152\1\132\1\63\2\132\1\155"+
    "\22\152\42\156\1\157\1\160\1\156\1\161\15\156\1\162"+
    "\1\156\1\130\1\163\22\156\43\164\1\165\1\157\1\166"+
    "\15\164\1\167\1\164\1\130\1\170\22\164\4\132\1\171"+
    "\1\132\4\171\1\123\1\132\6\171\1\132\6\171\2\132"+
    "\2\171\1\132\4\171\1\132\1\44\1\132\1\46\1\136"+
    "\2\132\5\171\1\132\1\172\1\173\2\132\1\63\1\174"+
    "\1\132\1\66\1\132\1\171\1\132\4\171\13\132\13\175"+
    "\1\132\26\175\1\176\1\44\1\177\1\46\1\132\7\175"+
    "\1\132\1\175\1\132\1\175\1\132\1\63\1\132\1\200"+
    "\1\66\22\175\4\132\1\201\1\132\4\201\2\132\3\201"+
    "\1\202\2\201\1\132\6\201\2\132\1\203\1\201\1\132"+
    "\4\201\1\132\1\44\1\132\1\46\1\136\2\132\5\201"+
    "\2\132\1\204\2\132\1\63\2\132\1\66\1\132\1\201"+
    "\1\132\4\201\13\132\10\205\1\206\3\205\1\206\12\205"+
    "\1\206\7\205\3\206\1\207\1\44\1\210\1\46\1\136"+
    "\3\205\1\206\10\205\1\63\2\205\1\66\22\205\1\20"+
    "\1\21\2\22\1\23\1\22\2\24\1\137\1\26\1\123"+
    "\1\20\1\140\1\31\1\32\1\33\1\34\1\35\1\211"+
    "\4\24\1\141\1\24\1\20\1\40\1\110\1\24\1\42"+
    "\1\24\3\141\1\142\1\44\1\143\1\46\1\136\1\50"+
    "\1\111\1\112\1\144\1\54\1\24\1\114\1\56\1\57"+
    "\1\115\1\61\1\62\1\63\1\116\1\117\1\66\1\67"+
    "\1\70\1\71\2\24\1\72\1\24\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\120\1\102\1\121\1\104\1\105"+
    "\112\0\1\212\1\213\1\212\1\0\1\212\1\214\1\215"+
    "\1\216\1\217\3\0\1\215\10\0\1\214\1\216\1\217"+
    "\1\0\1\220\2\221\1\0\1\222\53\0\3\22\1\0"+
    "\1\22\3\0\1\217\16\0\1\217\1\0\1\220\2\221"+
    "\1\0\1\222\53\0\11\24\2\0\4\24\1\223\1\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\3\24"+
    "\1\224\1\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\4\24\14\0\7\24"+
    "\1\225\1\24\2\0\1\225\5\24\1\0\4\24\1\225"+
    "\2\24\1\0\2\24\1\0\1\24\3\225\1\43\1\0"+
    "\1\45\4\0\1\24\1\226\3\24\12\0\1\24\1\0"+
    "\4\24\14\0\3\24\1\227\5\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\13\0\13\106\1\0\1\230\30\106"+
    "\1\27\1\231\14\106\1\27\25\106\1\0\7\24\1\225"+
    "\1\232\2\0\1\225\1\233\4\24\1\0\4\24\1\225"+
    "\2\24\1\0\2\24\1\0\1\24\3\225\1\43\1\0"+
    "\1\45\4\0\1\24\1\225\3\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\1\24\1\234\3\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\1\235\1\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\14\0\11\24\2\0\4\24"+
    "\1\236\1\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\3\24\1\237\1\24\12\0\1\240\1\0\1\24"+
    "\1\241\2\24\14\0\11\24\2\0\1\24\1\242\4\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\14\0\10\24\1\243\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\7\24\1\225"+
    "\1\24\2\0\1\225\5\24\1\0\4\24\1\225\2\24"+
    "\1\0\2\24\1\0\1\24\3\225\1\43\1\0\1\45"+
    "\4\0\1\24\1\225\3\24\12\0\1\24\1\0\4\24"+
    "\14\0\3\220\1\0\1\220\104\0\5\24\1\244\2\24"+
    "\1\245\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\77\0"+
    "\1\246\24\0\13\247\1\0\26\247\1\250\1\251\2\247"+
    "\1\252\42\247\13\253\1\0\27\253\1\254\1\255\1\253"+
    "\1\252\42\253\64\0\1\256\25\0\3\24\1\257\5\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\1\24\1\260\3\24\12\0\1\24\1\0\4\24"+
    "\14\0\3\24\1\261\3\24\1\225\1\24\2\0\1\225"+
    "\5\24\1\0\4\24\1\225\2\24\1\0\1\262\1\24"+
    "\1\0\1\24\3\225\1\43\1\0\1\45\4\0\1\24"+
    "\1\225\3\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\1\24\1\263\3\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\24\2\0\3\24\1\264\2\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\12\0\1\24"+
    "\1\0\4\24\71\0\1\265\1\0\1\266\3\0\1\267"+
    "\103\0\1\270\4\0\1\271\104\0\1\272\3\0\1\273"+
    "\110\0\1\274\110\0\1\275\25\0\11\24\2\0\1\24"+
    "\1\276\1\24\1\277\2\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\300\3\24\12\0\1\24"+
    "\1\0\4\24\14\0\11\24\2\0\3\24\1\301\2\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\3\24\1\302\77\0\1\303\11\0"+
    "\1\304\76\0\1\305\110\0\1\306\110\0\1\307\110\0"+
    "\1\310\24\0\13\106\1\0\32\106\1\0\42\106\45\0"+
    "\2\311\7\0\1\312\4\0\1\311\26\0\5\24\1\244"+
    "\2\24\1\313\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\3\24\1\257\5\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\1\24\1\314\3\24"+
    "\12\0\1\24\1\0\4\24\14\0\3\24\1\261\3\24"+
    "\1\225\1\24\2\0\1\225\5\24\1\0\4\24\1\225"+
    "\2\24\1\0\1\315\1\24\1\0\1\24\3\225\1\43"+
    "\1\0\1\45\4\0\1\24\1\225\3\24\12\0\1\24"+
    "\1\0\4\24\14\0\11\24\2\0\3\24\1\316\2\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\60\0\2\311\7\0\1\312"+
    "\1\0\1\272\2\0\1\311\1\273\71\0\2\311\7\0"+
    "\1\312\4\0\1\311\1\275\24\0\12\122\1\0\43\122"+
    "\1\0\6\122\1\0\23\122\13\123\1\0\32\123\1\0"+
    "\42\123\57\0\1\317\1\0\1\320\30\0\11\133\2\0"+
    "\6\133\1\0\1\133\1\0\4\133\2\0\2\133\1\0"+
    "\4\133\5\0\1\133\1\0\5\133\12\0\1\133\1\0"+
    "\4\133\14\0\11\133\2\0\6\133\1\0\1\133\1\0"+
    "\4\133\2\0\2\133\1\0\4\133\5\0\1\133\1\0"+
    "\5\133\12\0\1\321\1\0\4\133\14\0\10\133\1\322"+
    "\2\0\6\133\1\0\1\133\1\0\4\133\2\0\2\133"+
    "\1\0\4\133\5\0\1\133\1\0\5\133\12\0\1\133"+
    "\1\0\4\133\14\0\7\24\1\323\1\24\2\0\1\323"+
    "\5\24\1\0\4\24\1\323\2\24\1\0\2\24\1\0"+
    "\1\24\3\323\1\142\1\0\1\143\4\0\1\24\1\324"+
    "\3\24\12\0\1\24\1\0\4\24\14\0\7\24\1\323"+
    "\1\232\2\0\1\323\1\233\4\24\1\0\4\24\1\323"+
    "\2\24\1\0\2\24\1\0\1\24\3\323\1\142\1\0"+
    "\1\143\4\0\1\24\1\323\3\24\12\0\1\24\1\0"+
    "\4\24\14\0\7\24\1\323\1\24\2\0\1\323\5\24"+
    "\1\0\4\24\1\323\2\24\1\0\2\24\1\0\1\24"+
    "\3\323\1\142\1\0\1\143\4\0\1\24\1\323\3\24"+
    "\12\0\1\24\1\0\4\24\13\0\13\325\1\0\26\325"+
    "\1\326\1\327\2\325\1\0\42\325\13\330\1\0\27\330"+
    "\1\331\1\332\1\330\1\0\42\330\1\0\3\24\1\261"+
    "\3\24\1\323\1\24\2\0\1\323\5\24\1\0\4\24"+
    "\1\323\2\24\1\0\1\315\1\24\1\0\1\24\3\323"+
    "\1\142\1\0\1\143\4\0\1\24\1\323\3\24\12\0"+
    "\1\24\1\0\4\24\14\0\3\24\1\261\3\24\1\323"+
    "\1\24\2\0\1\323\5\24\1\0\4\24\1\323\2\24"+
    "\1\0\1\262\1\24\1\0\1\24\3\323\1\142\1\0"+
    "\1\143\4\0\1\24\1\323\3\24\12\0\1\24\1\0"+
    "\4\24\13\0\13\152\1\0\26\152\1\0\1\152\1\0"+
    "\1\152\1\0\7\152\1\0\1\152\1\0\1\152\4\0"+
    "\23\152\42\156\1\0\1\333\21\156\1\0\134\156\43\164"+
    "\1\334\1\0\20\164\1\0\134\164\1\0\11\171\2\0"+
    "\6\171\1\0\1\171\1\0\4\171\2\0\2\171\1\0"+
    "\4\171\5\0\1\171\1\0\5\171\12\0\1\171\1\0"+
    "\4\171\73\0\1\335\31\0\11\201\2\0\6\201\1\0"+
    "\1\201\1\0\4\201\2\0\2\201\1\0\4\201\5\0"+
    "\1\201\1\0\5\201\12\0\1\201\1\0\4\201\14\0"+
    "\11\201\2\0\6\201\1\0\1\201\1\0\4\201\2\0"+
    "\2\201\1\0\4\201\5\0\1\201\1\0\5\201\12\0"+
    "\1\336\1\0\4\201\14\0\10\201\1\337\2\0\6\201"+
    "\1\0\1\201\1\0\4\201\2\0\2\201\1\0\4\201"+
    "\5\0\1\201\1\0\5\201\12\0\1\201\1\0\4\201"+
    "\23\0\1\340\3\0\1\340\12\0\1\340\7\0\3\340"+
    "\1\207\1\0\1\210\5\0\1\340\36\0\13\341\1\0"+
    "\26\341\1\342\1\343\2\341\1\344\42\341\13\345\1\0"+
    "\27\345\1\346\1\347\1\345\1\344\42\345\12\0\1\350"+
    "\32\0\1\311\1\351\7\0\1\312\4\0\1\352\26\0"+
    "\1\212\1\213\1\212\1\0\1\212\3\0\1\217\16\0"+
    "\1\217\1\0\1\220\2\221\1\0\1\222\53\0\3\213"+
    "\1\0\1\213\24\0\1\220\2\221\1\0\1\222\53\0"+
    "\5\353\2\0\1\353\3\0\1\353\1\0\1\353\6\0"+
    "\1\353\1\0\1\353\3\0\2\353\2\0\1\353\30\0"+
    "\1\353\21\0\1\354\1\0\1\354\1\0\1\354\104\0"+
    "\1\355\3\0\1\355\104\0\3\220\1\0\1\220\25\0"+
    "\2\221\1\0\1\222\53\0\3\356\1\0\1\356\27\0"+
    "\1\357\11\0\1\357\42\0\11\24\2\0\2\24\1\360"+
    "\3\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\3\24\1\361\1\24\12\0\1\24\1\0\4\24\14\0"+
    "\7\24\1\362\1\24\2\0\1\362\5\24\1\0\4\24"+
    "\1\362\2\24\1\0\2\24\1\0\1\24\3\362\1\43"+
    "\1\0\1\45\4\0\1\24\1\362\3\24\12\0\1\24"+
    "\1\0\4\24\14\0\7\24\1\362\1\24\2\0\1\362"+
    "\5\24\1\0\4\24\1\362\2\24\1\0\1\363\1\24"+
    "\1\0\1\24\3\362\1\43\1\0\1\45\4\0\1\24"+
    "\1\362\3\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\1\24\1\364\2\24"+
    "\13\0\13\106\1\0\1\106\1\365\30\106\1\0\42\106"+
    "\14\0\1\366\30\0\2\231\14\0\1\231\26\0\3\24"+
    "\1\367\5\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\24\2\0\4\24\1\370\1\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\12\0\1\24"+
    "\1\0\4\24\14\0\10\24\1\371\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\372\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\1\373\4\24"+
    "\12\0\1\24\1\0\4\24\14\0\11\24\2\0\6\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\2\24"+
    "\1\374\2\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\1\24\1\375\4\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\24\2\0\1\376\5\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\3\24\1\377\2\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\3\24\1\u0100"+
    "\1\24\12\0\1\24\1\0\4\24\13\0\13\247\1\0"+
    "\26\247\1\u0101\1\251\2\247\1\252\42\247\42\0\1\u0102"+
    "\1\u0103\1\0\1\u0104\1\252\14\0\1\u0104\5\0\1\252"+
    "\17\0\111\247\13\253\1\0\27\253\1\254\1\u0101\1\253"+
    "\1\252\153\253\43\0\1\u0103\1\u0105\1\u0104\1\252\14\0"+
    "\1\u0104\5\0\1\252\20\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\3\24\1\u0106"+
    "\1\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\3\24\1\u0107\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\3\24\1\u0108\2\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\2\24\1\u0109\2\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\4\24\1\u010a"+
    "\12\0\1\24\1\0\4\24\14\0\11\24\2\0\6\24"+
    "\1\0\7\24\1\0\1\u010b\1\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\77\0\1\u010c\110\0"+
    "\1\u010d\110\0\1\u010e\25\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\1\24\1\u010f"+
    "\3\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\4\24\1\u0110\1\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\1\24\1\u0111\4\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\2\24\1\u0112\2\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\3\24\1\u0113"+
    "\2\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\77\0\1\u0114\25\0"+
    "\11\24\2\0\3\24\1\377\2\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\3\24\1\u0115\1\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\3\24\1\u0116"+
    "\2\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\2\24\1\u0117\2\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\1\u0118\1\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\17\0\1\u0119\1\0\4\u0119\2\0\6\u0119\1\0\6\u0119"+
    "\2\0\2\u0119\1\0\4\u0119\7\0\5\u0119\12\0\1\u0119"+
    "\1\0\4\u0119\62\0\1\u011a\42\0\11\133\2\0\6\133"+
    "\1\0\1\133\1\0\4\133\2\0\2\133\1\0\4\133"+
    "\5\0\1\133\1\0\3\133\1\u011b\1\133\12\0\1\133"+
    "\1\0\4\133\14\0\7\24\1\u011c\1\24\2\0\1\u011c"+
    "\5\24\1\0\4\24\1\u011c\2\24\1\0\2\24\1\0"+
    "\1\24\3\u011c\1\142\1\0\1\143\4\0\1\24\1\u011c"+
    "\3\24\12\0\1\24\1\0\4\24\14\0\7\24\1\u011c"+
    "\1\24\2\0\1\u011c\5\24\1\0\4\24\1\u011c\2\24"+
    "\1\0\1\363\1\24\1\0\1\24\3\u011c\1\142\1\0"+
    "\1\143\4\0\1\24\1\u011c\3\24\12\0\1\24\1\0"+
    "\4\24\13\0\13\325\1\0\26\325\1\u011d\1\327\2\325"+
    "\1\0\42\325\42\0\1\u011e\46\0\111\325\13\330\1\0"+
    "\27\330\1\331\1\u011d\1\330\1\0\153\330\44\0\1\u011f"+
    "\45\0\11\201\2\0\6\201\1\0\1\201\1\0\4\201"+
    "\2\0\2\201\1\0\4\201\5\0\1\201\1\0\3\201"+
    "\1\u0120\1\201\12\0\1\201\1\0\4\201\23\0\1\u0121"+
    "\3\0\1\u0121\12\0\1\u0121\7\0\3\u0121\1\207\1\0"+
    "\1\210\5\0\1\u0121\36\0\13\341\1\0\26\341\1\u0122"+
    "\1\343\2\341\1\344\42\341\42\0\1\u0123\1\u0124\1\0"+
    "\1\u0125\1\344\14\0\1\u0125\5\0\1\344\17\0\111\341"+
    "\13\345\1\0\27\345\1\346\1\u0122\1\345\1\344\153\345"+
    "\43\0\1\u0124\1\u0126\1\u0125\1\344\14\0\1\u0125\5\0"+
    "\1\344\17\0\13\350\1\0\32\350\1\u0127\42\350\1\0"+
    "\5\353\2\0\1\353\1\217\2\0\1\353\1\0\1\353"+
    "\6\0\1\353\1\0\1\353\1\217\2\0\2\353\2\0"+
    "\1\353\30\0\1\353\21\0\1\354\1\0\1\354\1\0"+
    "\1\354\3\0\1\217\16\0\1\217\61\0\1\355\3\0"+
    "\1\355\3\0\1\217\16\0\1\217\61\0\3\356\1\0"+
    "\1\356\30\0\1\222\53\0\3\356\1\0\1\356\104\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\1\u0128\1\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\1\u0129\1\0\1\u012a\4\0\5\24\12\0"+
    "\1\24\1\0\4\24\14\0\3\24\1\u012b\5\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\7\24\1\u012c"+
    "\1\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\13\0"+
    "\13\106\1\0\2\106\1\u012d\27\106\1\0\42\106\15\0"+
    "\1\u012e\74\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\3\24\1\u012f\1\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\2\24\1\u0130"+
    "\2\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\1\24\1\u0131\4\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\7\24\1\u0132\1\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\1\u0133\1\24\1\0\4\24\7\0\5\24\12\0\1\24"+
    "\1\0\4\24\14\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\12\0\1\u0134"+
    "\1\0\4\24\14\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\1\u0135\1\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\56\0\1\u0103\1\0\1\u0104\1\252"+
    "\14\0\1\u0104\5\0\1\252\17\0\42\u0102\1\u0136\1\u0137"+
    "\45\u0102\43\u0105\1\u0138\1\u0139\44\u0105\1\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\3\24\1\u013a\1\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\4\24\1\u013b\1\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\3\24\1\u013c\1\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\3\24\1\u013d\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\14\0\10\24\1\u013e\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\3\24\1\u013f"+
    "\5\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\1\24\1\u0140"+
    "\2\24\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\3\24\1\u0141\14\0\10\24\1\u0142\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\1\u0143\1\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\14\0\11\24\2\0\4\24"+
    "\1\u0144\1\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\3\24"+
    "\1\u0145\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\10\24\1\u0146\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\u0119\2\0\6\u0119\1\0\7\u0119\1\0\2\u0119"+
    "\1\0\4\u0119\7\0\5\u0119\2\0\1\u0147\7\0\1\u0119"+
    "\1\0\4\u0119\62\0\1\u0148\42\0\11\133\2\0\6\133"+
    "\1\0\1\133\1\0\4\133\2\0\1\321\1\133\1\0"+
    "\4\133\5\0\1\133\1\0\5\133\12\0\1\133\1\0"+
    "\4\133\14\0\11\24\2\0\6\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\1\u0149\1\0\1\u014a\4\0\5\24"+
    "\12\0\1\24\1\0\4\24\13\0\42\u011e\1\u014b\1\u014c"+
    "\45\u011e\43\u011f\1\u014d\1\u014e\44\u011f\1\0\11\201\2\0"+
    "\6\201\1\0\1\201\1\0\4\201\2\0\1\336\1\201"+
    "\1\0\4\201\5\0\1\201\1\0\5\201\12\0\1\201"+
    "\1\0\4\201\55\0\1\u014f\1\0\1\u0150\107\0\1\u0124"+
    "\1\0\1\u0125\1\344\14\0\1\u0125\5\0\1\344\17\0"+
    "\42\u0123\1\u0151\1\u0152\45\u0123\43\u0126\1\u0153\1\u0154\44\u0126"+
    "\1\0\11\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\u0155\3\24\12\0\1\24"+
    "\1\0\4\24\55\0\1\u0156\112\0\1\u0157\45\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\1\u0158\3\24\14\0"+
    "\11\24\2\0\2\24\1\u0159\3\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\13\0\13\106\1\0\3\106\1\u015a\26\106\1\0"+
    "\42\106\16\0\1\u015b\73\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\3\24\1\u015c"+
    "\1\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\3\24\1\u015d\2\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\1\24\1\u015e\3\24\12\0\1\24\1\0"+
    "\4\24\14\0\3\24\1\u015f\5\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\1\u0160\4\24"+
    "\12\0\1\24\1\0\4\24\13\0\42\u0102\1\u0161\1\u0162"+
    "\156\u0102\154\u0105\1\u0163\1\u0164\44\u0105\1\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\2\24\1\u0165\2\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\1\u0166\1\24"+
    "\1\0\4\24\7\0\5\24\12\0\1\24\1\0\4\24"+
    "\14\0\11\24\2\0\6\24\1\0\7\24\1\0\2\24"+
    "\1\0\4\24\7\0\1\24\1\u0167\3\24\12\0\1\24"+
    "\1\0\4\24\14\0\11\24\2\0\2\24\1\u0168\3\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\14\0\10\24\1\u0169\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\5\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\1\u0141\1\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\3\0\2\311\2\0\5\24\1\312\4\0\1\311\4\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\2\24\1\u016a"+
    "\2\24\12\0\1\24\1\0\4\24\14\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\1\24\1\u016b\3\24\12\0\1\24\1\0\4\24\14\0"+
    "\11\24\2\0\2\24\1\u016c\3\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\13\0\47\u0148\1\u016d\41\u0148\42\0\1\u016e\112\0"+
    "\1\u016f\44\0\42\u011e\1\u0170\1\u0171\156\u011e\154\u011f\1\u0172"+
    "\1\u0173\44\u011f\42\0\1\u0174\112\0\1\u0175\44\0\42\u0123"+
    "\1\u0176\1\u0177\156\u0123\154\u0126\1\u0178\1\u0179\44\u0126\1\0"+
    "\11\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\2\24\1\u017a\2\24\12\0\1\24\1\0"+
    "\4\24\55\0\1\u0102\112\0\1\u0105\45\0\3\24\1\u017b"+
    "\5\24\2\0\6\24\1\0\7\24\1\0\2\24\1\0"+
    "\4\24\7\0\5\24\12\0\1\24\1\0\4\24\13\0"+
    "\13\106\1\0\4\106\1\u017c\25\106\1\0\42\106\17\0"+
    "\1\u017d\72\0\11\24\2\0\4\24\1\u017e\1\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\14\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\2\24\1\0\4\24\7\0\2\24\1\u017f"+
    "\2\24\12\0\1\24\1\0\4\24\14\0\10\24\1\u0180"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\5\24\12\0\1\24\1\0\4\24\14\0\11\24"+
    "\2\0\6\24\1\0\7\24\1\0\2\24\1\0\4\24"+
    "\7\0\2\24\1\u0181\2\24\12\0\1\24\1\0\4\24"+
    "\13\0\42\u0102\1\u0182\1\u0162\107\u0102\1\u0183\1\u0162\45\u0102"+
    "\43\u0105\1\u0163\1\u0184\107\u0105\1\u0163\1\u0182\44\u0105\1\0"+
    "\11\24\2\0\4\24\1\u0185\1\24\1\0\7\24\1\0"+
    "\2\24\1\0\4\24\7\0\5\24\12\0\1\24\1\0"+
    "\4\24\14\0\10\24\1\u0186\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\4\24\7\0\5\24\12\0\1\24"+
    "\1\0\4\24\14\0\11\24\2\0\4\24\1\u0187\1\24"+
    "\1\0\7\24\1\0\2\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\13\0\47\u0148\1\u0188\41\u0148"+
    "\42\u011e\1\u0189\1\u0171\107\u011e\1\u018a\1\u0171\45\u011e\43\u011f"+
    "\1\u0172\1\u018b\107\u011f\1\u0172\1\u0189\44\u011f\42\0\1\u0123"+
    "\112\0\1\u0126\44\0\42\u0123\1\u018c\1\u0177\107\u0123\1\u018d"+
    "\1\u0177\45\u0123\43\u0126\1\u0178\1\u018e\107\u0126\1\u0178\1\u018c"+
    "\44\u0126\13\106\1\0\5\106\1\u018f\24\106\1\0\42\106"+
    "\20\0\1\u0190\71\0\11\24\2\0\6\24\1\0\7\24"+
    "\1\0\2\24\1\0\3\24\1\u0191\7\0\5\24\12\0"+
    "\1\24\1\0\4\24\56\0\1\u0192\1\0\1\u0193\1\u0194"+
    "\14\0\1\u0193\5\0\1\u0194\17\0\42\u0102\1\u0195\1\u0162"+
    "\45\u0102\43\u0105\1\u0163\1\u0196\44\u0105\1\0\11\24\2\0"+
    "\6\24\1\0\7\24\1\0\2\24\1\0\4\24\7\0"+
    "\4\24\1\u0197\12\0\1\24\1\0\4\24\13\0\60\u0148"+
    "\1\u0198\30\u0148\42\u011e\1\u0199\1\u0171\45\u011e\43\u011f\1\u0172"+
    "\1\u019a\44\u011f\42\u0123\1\u019b\1\u0177\45\u0123\43\u0126\1\u0178"+
    "\1\u019c\44\u0126\13\106\1\0\6\106\1\u019d\23\106\1\0"+
    "\42\106\21\0\1\u019e\70\0\11\24\2\0\6\24\1\0"+
    "\7\24\1\0\1\u019f\1\24\1\0\4\24\7\0\5\24"+
    "\12\0\1\24\1\0\4\24\13\0\42\u0102\1\u01a0\1\u0162"+
    "\45\u0102\43\u0105\1\u0163\1\u01a1\44\u0105\42\u011e\1\u01a2\1\u0171"+
    "\45\u011e\43\u011f\1\u0172\1\u01a3\44\u011f\42\u0123\1\u01a4\1\u0177"+
    "\45\u0123\43\u0126\1\u0178\1\u01a5\44\u0126\13\u01a6\1\0\31\u01a6"+
    "\2\u019d\14\u01a6\1\u019d\25\u01a6\22\0\1\u019d\66\0\13\u01a6"+
    "\1\0\32\u01a6\1\0\42\u01a6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\3\0\4\1\5\0\1\11\15\1\1\11"+
    "\5\1\1\11\1\1\2\11\1\1\1\11\10\1\2\11"+
    "\1\1\3\11\1\1\1\11\6\1\6\11\22\1\1\11"+
    "\1\1\1\11\3\1\1\11\7\1\1\11\10\1\1\11"+
    "\13\1\6\11\3\1\2\11\5\1\4\0\1\11\1\1"+
    "\1\0\1\11\6\1\1\0\14\1\1\11\3\1\1\11"+
    "\3\1\1\11\7\1\2\11\1\1\1\11\1\1\3\11"+
    "\5\1\1\11\1\1\4\11\1\0\1\11\4\1\2\0"+
    "\12\1\2\0\1\11\2\1\1\0\3\1\1\11\3\1"+
    "\1\0\1\1\1\0\4\1\1\0\6\1\1\0\14\1"+
    "\1\11\1\0\7\1\3\11\5\1\1\11\4\1\2\0"+
    "\2\1\1\11\3\1\1\0\2\1\1\11\1\0\1\1"+
    "\1\11\1\1\2\0\3\1\1\0\7\1\1\0\2\1"+
    "\1\0\15\1\1\11\12\0\2\1\1\0\1\1\2\0"+
    "\3\1\1\0\5\1\1\0\2\1\1\0\10\1\4\0"+
    "\2\1\4\0\2\1\1\0\3\1\1\0\12\1\1\0"+
    "\1\11\6\1\1\0\1\1\1\11\1\0\1\11\2\0"+
    "\1\1\1\11\4\0\1\1\1\0\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[422];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private void enterState(int state) {
    stateStack.push(new State(yystate(), embedBraceCount));
    yybegin(state);
    embedBraceCount = 0;
}
private boolean exitState() {
    int size = stateStack.size();
    if (size <= 0) {
        yybegin(YYINITIAL);
        return false;   // error condition
    } else {
        State mystate = stateStack.pop();
        yybegin(mystate.lexState);
        embedBraceCount = mystate.embedBraceCount;
        return true;
    }
}

// Counter for keeping track of when an embed statment ends, as opposed to when inner braces closes.
int embedBraceCount = 0;

class State {
    public int lexState;
    public int embedBraceCount;

    State (int lexState, int embedBraceCount) {
        this.lexState = lexState;
        this.embedBraceCount = embedBraceCount;
    }
}
Stack<State> stateStack = new Stack<State>();


private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}



  PyxlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PyxlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 4678) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 115: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 126: break;
        case 56: 
          { return exitState() ? PyxlTokenTypes.TAGEND : PyxlTokenTypes.BADCHAR;
          }
        case 127: break;
        case 5: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 128: break;
        case 18: 
          { return PyTokenTypes.DIV;
          }
        case 129: break;
        case 28: 
          { return PyTokenTypes.PERC;
          }
        case 130: break;
        case 12: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 131: break;
        case 34: 
          { return PyTokenTypes.RPAR;
          }
        case 132: break;
        case 4: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 133: break;
        case 23: 
          { return PyTokenTypes.LBRACE;
          }
        case 134: break;
        case 91: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 135: break;
        case 112: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 136: break;
        case 103: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 137: break;
        case 122: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 138: break;
        case 15: 
          { return PyTokenTypes.MINUS;
          }
        case 139: break;
        case 47: 
          { exitState(); return PyxlTokenTypes.ATTRVALUE_END;
          }
        case 140: break;
        case 41: 
          { return PyxlTokenTypes.BADCHAR;
          }
        case 141: break;
        case 14: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
          }
        case 142: break;
        case 102: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 143: break;
        case 111: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 144: break;
        case 36: 
          { return PyTokenTypes.RBRACKET;
          }
        case 145: break;
        case 9: 
          { return PyTokenTypes.DOT;
          }
        case 146: break;
        case 6: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 147: break;
        case 33: 
          { return PyTokenTypes.LPAR;
          }
        case 148: break;
        case 17: 
          { return PyTokenTypes.LT;
          }
        case 149: break;
        case 66: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 150: break;
        case 57: 
          { yypushback(1); exitState();
          }
        case 151: break;
        case 84: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 152: break;
        case 62: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 153: break;
        case 114: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 154: break;
        case 106: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 155: break;
        case 98: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 156: break;
        case 21: 
          { return PyTokenTypes.SPACE;
          }
        case 157: break;
        case 40: 
          { enterState(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 158: break;
        case 85: 
          { return exitState() ? PyxlTokenTypes.TAGENDANDCLOSE : PyxlTokenTypes.BADCHAR;
          }
        case 159: break;
        case 120: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 160: break;
        case 60: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 161: break;
        case 44: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 162: break;
        case 45: 
          { embedBraceCount++; return PyTokenTypes.LBRACE;
          }
        case 163: break;
        case 49: 
          { yybegin(IN_PYXL_BLOCK); return PyxlTokenTypes.TAGEND;
          }
        case 164: break;
        case 24: 
          { return PyTokenTypes.FORMFEED;
          }
        case 165: break;
        case 50: 
          { enterState(IN_ATTRVALUE); return PyTokenTypes.EQ;
          }
        case 166: break;
        case 26: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 167: break;
        case 19: 
          { return PyTokenTypes.GT;
          }
        case 168: break;
        case 35: 
          { return PyTokenTypes.LBRACKET;
          }
        case 169: break;
        case 8: 
          { return PyTokenTypes.COLON;
          }
        case 170: break;
        case 96: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 171: break;
        case 105: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 172: break;
        case 30: 
          { return PyTokenTypes.OR;
          }
        case 173: break;
        case 3: 
          { return PyxlTokenTypes.ATTRVALUE;
          }
        case 174: break;
        case 88: 
          { yypushback(yylength()-1); enterState(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 175: break;
        case 77: 
          { return PyTokenTypes.MULTEQ;
          }
        case 176: break;
        case 123: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 177: break;
        case 109: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 178: break;
        case 55: 
          { return PyxlTokenTypes.TAGNAME;
          }
        case 179: break;
        case 27: 
          { return PyTokenTypes.MULT;
          }
        case 180: break;
        case 116: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 181: break;
        case 71: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 182: break;
        case 119: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 183: break;
        case 52: 
          { yybegin(ATTR_VALUE_1Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 184: break;
        case 117: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 185: break;
        case 82: 
          { return PyTokenTypes.XOREQ;
          }
        case 186: break;
        case 99: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 187: break;
        case 37: 
          { return PyTokenTypes.AT;
          }
        case 188: break;
        case 92: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 189: break;
        case 10: 
          { return PyTokenTypes.PLUS;
          }
        case 190: break;
        case 11: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 191: break;
        case 67: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 192: break;
        case 113: 
          { return PyTokenTypes.PRINT_KEYWORD;
          }
        case 193: break;
        case 75: 
          { return PyTokenTypes.NE;
          }
        case 194: break;
        case 16: 
          { return PyTokenTypes.COMMA;
          }
        case 195: break;
        case 53: 
          { yybegin(ATTR_VALUE_2Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 196: break;
        case 78: 
          { return PyTokenTypes.EXP;
          }
        case 197: break;
        case 76: 
          { return PyTokenTypes.EQEQ;
          }
        case 198: break;
        case 20: 
          { return PyTokenTypes.TICK;
          }
        case 199: break;
        case 1: 
          { return PyxlTokenTypes.STRING;
          }
        case 200: break;
        case 101: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 201: break;
        case 125: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 202: break;
        case 39: 
          { if (yystate() == PENDING_PYXL_TAG_FROM_PYTHON) {
            yybegin(IN_PYXL_TAG_NAME);
        } else {
            enterState(IN_PYXL_TAG_NAME);
        }
        return PyxlTokenTypes.TAGBEGIN;
          }
        case 203: break;
        case 68: 
          { return PyTokenTypes.LTLT;
          }
        case 204: break;
        case 70: 
          { return PyTokenTypes.LE;
          }
        case 205: break;
        case 2: 
          { exitState(); return PyxlTokenTypes.ATTRVALUE;
          }
        case 206: break;
        case 89: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 207: break;
        case 42: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.TAGNAME;
          }
        case 208: break;
        case 48: 
          { return PyxlTokenTypes.ATTRNAME;
          }
        case 209: break;
        case 61: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 210: break;
        case 54: 
          { yybegin(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 211: break;
        case 83: 
          { yypushback(yylength());
        enterState(PENDING_PYXL_TAG_FROM_PYTHON);
          }
        case 212: break;
        case 7: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 213: break;
        case 107: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 214: break;
        case 38: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 215: break;
        case 81: 
          { return PyTokenTypes.OREQ;
          }
        case 216: break;
        case 73: 
          { return PyTokenTypes.GTGT;
          }
        case 217: break;
        case 29: 
          { return PyTokenTypes.AND;
          }
        case 218: break;
        case 110: 
          { yybegin(IN_CLOSE_TAG); yypushback(yylength()-2); return PyxlTokenTypes.TAGCLOSE;
          }
        case 219: break;
        case 72: 
          { return PyTokenTypes.DIVEQ;
          }
        case 220: break;
        case 121: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 221: break;
        case 118: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 222: break;
        case 74: 
          { return PyTokenTypes.GE;
          }
        case 223: break;
        case 65: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 224: break;
        case 86: 
          { return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 225: break;
        case 63: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 226: break;
        case 51: 
          { yypushback(1); yybegin(ATTR_VALUE_UNQUOTED);
          }
        case 227: break;
        case 97: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 228: break;
        case 59: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 229: break;
        case 94: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 230: break;
        case 43: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 231: break;
        case 79: 
          { return PyTokenTypes.PERCEQ;
          }
        case 232: break;
        case 95: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 233: break;
        case 58: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 234: break;
        case 93: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 235: break;
        case 80: 
          { return PyTokenTypes.ANDEQ;
          }
        case 236: break;
        case 22: 
          { return PyTokenTypes.EQ;
          }
        case 237: break;
        case 108: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 238: break;
        case 100: 
          { return PyTokenTypes.EXPEQ;
          }
        case 239: break;
        case 124: 
          { // Look for # coding: pyxl
        if(zzCurrentPos == 0) {
            enterState(IN_PYXL_DOCUMENT);
            return PyTokenTypes.END_OF_LINE_COMMENT;
        }
          }
        case 240: break;
        case 104: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 241: break;
        case 87: 
          { yypushback(getSpaceLength(yytext())); exitState(); return PyTokenTypes.DOCSTRING;
          }
        case 242: break;
        case 25: 
          { return PyTokenTypes.RBRACE;
          }
        case 243: break;
        case 64: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 244: break;
        case 13: 
          { return PyTokenTypes.TAB;
          }
        case 245: break;
        case 69: 
          { return PyTokenTypes.NE_OLD;
          }
        case 246: break;
        case 32: 
          { return PyTokenTypes.TILDE;
          }
        case 247: break;
        case 46: 
          { if (embedBraceCount-- == 0) {
                               exitState();
                               return PyxlTokenTypes.EMBED_END;
                           } else {
                               return PyTokenTypes.RBRACE;
                           }
          }
        case 248: break;
        case 90: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 249: break;
        case 31: 
          { return PyTokenTypes.XOR;
          }
        case 250: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
