/* The following code was generated by JFlex 1.4.3 on 7/22/14 2:52 PM */

package com.christofferklang.pyxl.parsing;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.jetbrains.python.PyTokenTypes;
import com.christofferklang.pyxl.PyxlTokenTypes;
import com.intellij.openapi.util.text.StringUtil;
import java.util.Stack;
import com.intellij.psi.tree.IElementType;


// NOTE: JFlex lexer file is defined in http://www.jflex.de/manual.pdf


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 7/22/14 2:52 PM from the specification file
 * <tt>/Users/nils/src/hack/pycharm-pyxl/src/com/christofferklang/pyxl/parsing/Pyxl.flex</tt>
 */
class PyxlLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PENDING_DOCSTRING = 18;
  public static final int IN_PYXL_PYTHON_EMBED = 8;
  public static final int IN_PYXL_TAG_NAME = 6;
  public static final int ATTR_VALUE_2Q = 12;
  public static final int IN_PYXL_BLOCK = 4;
  public static final int IN_CLOSE_TAG = 16;
  public static final int IN_PYXL_DOCUMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int IN_DOCSTRING_OWNER = 20;
  public static final int ATTR_VALUE_1Q = 10;
  public static final int IN_ATTR = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\45\1\46\1\0\1\60\1\13\22\0\1\57\1\54\1\44"+
    "\1\12\1\0\1\75\1\76\1\42\1\102\1\103\1\74\1\35\1\107"+
    "\1\47\1\32\1\53\1\1\1\5\6\3\2\2\1\22\1\63\1\51"+
    "\1\50\1\52\1\0\1\106\1\25\1\27\1\37\1\25\1\34\1\25"+
    "\3\23\1\36\1\23\1\30\2\23\1\7\2\23\1\40\2\23\1\40"+
    "\2\23\1\26\2\23\1\104\1\43\1\105\1\100\1\23\1\110\1\4"+
    "\1\10\1\14\1\16\1\33\1\61\1\21\1\73\1\17\1\36\1\66"+
    "\1\11\1\71\1\20\1\15\1\67\1\23\1\64\1\62\1\65\1\41"+
    "\1\23\1\72\1\6\1\70\1\23\1\55\1\77\1\56\1\101\53\0"+
    "\1\24\12\0\1\24\4\0\1\24\5\0\27\24\1\0\7\24\30\24"+
    "\1\0\10\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\3\24\2\24\1\24\1\24\1\24"+
    "\2\24\1\24\3\24\2\24\4\24\1\24\2\24\1\24\3\24\3\24"+
    "\2\24\1\24\2\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\2\24\1\24\1\24\2\24\1\24\3\24\1\24\1\24\1\24"+
    "\2\24\2\24\1\24\1\24\3\24\4\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\2\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\2\24\1\24"+
    "\1\24\1\24\1\24\1\24\3\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\4\24\31\0\140\24\22\24\4\0\14\24\16\0"+
    "\5\24\11\0\1\24\21\0\130\31\5\0\23\31\12\0\1\24\13\0"+
    "\1\24\1\0\3\24\1\0\1\24\1\0\2\24\1\24\21\24\1\0"+
    "\11\24\43\24\1\0\2\24\3\24\3\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\5\24"+
    "\1\24\1\24\1\0\1\24\1\24\2\24\1\24\4\0\60\24\60\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\0\4\31\3\0\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\2\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\0\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\2\0\1\24\1\24\6\0\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\41\0\46\24\2\0\1\24\7\0\47\24"+
    "\11\0\21\31\1\0\27\31\1\0\3\31\1\0\1\31\1\0\2\31"+
    "\1\0\1\31\13\0\33\24\5\0\3\24\35\0\6\31\13\0\32\24"+
    "\5\0\1\24\12\24\16\31\7\0\12\31\4\0\2\24\1\31\143\24"+
    "\1\0\1\24\7\31\2\0\6\31\2\24\2\31\1\0\4\31\2\24"+
    "\12\31\3\24\2\0\1\24\20\0\1\24\1\31\36\24\33\31\2\0"+
    "\3\24\60\0\46\24\13\31\1\24\u014f\0\2\31\1\31\66\24\2\0"+
    "\1\31\1\24\3\31\10\31\4\31\1\31\2\0\1\24\4\31\3\0"+
    "\12\24\2\31\2\0\12\31\21\0\1\31\2\31\1\0\10\24\2\0"+
    "\2\24\2\0\26\24\1\0\7\24\1\0\1\24\3\0\4\24\2\0"+
    "\1\31\1\24\3\31\4\31\2\0\2\31\2\0\2\31\1\31\11\0"+
    "\1\31\4\0\2\24\1\0\3\24\2\31\2\0\12\31\2\24\17\0"+
    "\2\31\1\31\1\0\6\24\4\0\2\24\2\0\26\24\1\0\7\24"+
    "\1\0\2\24\1\0\2\24\1\0\2\24\2\0\1\31\1\0\3\31"+
    "\2\31\4\0\2\31\2\0\3\31\13\0\4\24\1\0\1\24\7\0"+
    "\12\31\2\31\3\24\14\0\2\31\1\31\1\0\11\24\1\0\3\24"+
    "\1\0\26\24\1\0\7\24\1\0\2\24\1\0\5\24\2\0\1\31"+
    "\1\24\3\31\5\31\1\0\2\31\1\31\1\0\2\31\1\31\2\0"+
    "\1\24\17\0\2\24\2\31\2\0\12\31\21\0\1\31\2\31\1\0"+
    "\10\24\2\0\2\24\2\0\26\24\1\0\7\24\1\0\2\24\1\0"+
    "\5\24\2\0\1\31\1\24\1\31\1\31\1\31\3\31\3\0\2\31"+
    "\2\0\2\31\1\31\10\0\1\31\1\31\4\0\2\24\1\0\3\24"+
    "\4\0\12\31\1\0\1\24\20\0\1\31\1\24\1\0\6\24\3\0"+
    "\3\24\1\0\4\24\3\0\2\24\1\0\1\24\1\0\2\24\3\0"+
    "\2\24\3\0\3\24\3\0\10\24\1\0\3\24\4\0\2\31\1\31"+
    "\2\31\3\0\3\31\1\0\3\31\1\31\11\0\1\31\17\0\11\31"+
    "\21\0\3\31\1\0\10\24\1\0\3\24\1\0\27\24\1\0\12\24"+
    "\1\0\5\24\4\0\3\31\4\31\1\0\3\31\1\0\4\31\7\0"+
    "\2\31\11\0\2\24\4\0\12\31\22\0\2\31\1\0\10\24\1\0"+
    "\3\24\1\0\27\24\1\0\12\24\1\0\5\24\2\0\1\31\1\24"+
    "\1\31\1\31\5\31\1\0\1\31\2\31\1\0\2\31\2\31\7\0"+
    "\2\31\7\0\1\24\1\0\2\24\4\0\12\31\22\0\2\31\1\0"+
    "\10\24\1\0\3\24\1\0\27\24\1\0\20\24\4\0\3\31\3\31"+
    "\2\0\3\31\1\0\3\31\1\31\11\0\1\31\10\0\2\24\4\0"+
    "\12\31\22\0\2\31\1\0\22\24\3\0\30\24\1\0\11\24\1\0"+
    "\1\24\2\0\7\24\3\0\1\31\4\0\3\31\3\31\1\0\1\31"+
    "\1\0\10\31\22\0\2\31\15\0\60\24\1\31\2\24\7\31\5\0"+
    "\6\24\1\24\10\31\1\0\12\31\47\0\2\24\1\0\1\24\2\0"+
    "\2\24\1\0\1\24\2\0\1\24\6\0\4\24\1\0\7\24\1\0"+
    "\3\24\1\0\1\24\1\0\1\24\2\0\2\24\1\0\4\24\1\31"+
    "\2\24\6\31\1\0\2\31\1\24\2\0\5\24\1\0\1\24\1\0"+
    "\6\31\2\0\12\31\2\0\2\24\42\0\1\24\27\0\2\31\6\0"+
    "\12\31\13\0\1\31\1\0\1\31\1\0\1\31\4\0\2\31\10\24"+
    "\1\0\42\24\6\0\16\31\1\31\5\31\1\0\2\31\4\24\4\0"+
    "\10\31\1\0\44\31\11\0\1\31\71\0\42\24\1\0\5\24\1\0"+
    "\2\24\1\0\1\31\4\31\1\31\1\31\3\0\2\31\1\31\1\31"+
    "\6\0\12\31\6\0\6\24\2\31\2\31\106\0\46\24\12\0\51\24"+
    "\7\0\132\24\5\0\104\24\5\0\122\24\6\0\7\24\1\0\77\24"+
    "\1\0\1\24\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24"+
    "\2\0\47\24\1\0\1\24\1\0\4\24\2\0\37\24\1\0\1\24"+
    "\1\0\4\24\2\0\7\24\1\0\1\24\1\0\4\24\2\0\7\24"+
    "\1\0\7\24\1\0\27\24\1\0\37\24\1\0\1\24\1\0\4\24"+
    "\2\0\7\24\1\0\47\24\1\0\23\24\16\0\11\31\56\0\125\24"+
    "\14\0\u026c\24\2\0\10\24\12\0\32\24\5\0\113\24\3\0\3\24"+
    "\17\0\15\24\1\0\4\24\3\31\13\0\22\24\3\31\13\0\22\24"+
    "\2\31\14\0\15\24\1\0\3\24\1\0\2\31\14\0\64\24\2\0"+
    "\1\31\7\31\10\31\1\31\2\31\13\31\3\0\1\24\4\0\1\24"+
    "\1\31\2\0\12\31\41\0\3\31\2\0\12\31\6\0\43\24\1\24"+
    "\64\24\10\0\51\24\1\31\126\0\35\24\3\0\3\31\4\31\2\31"+
    "\3\31\4\0\2\31\1\31\6\31\3\31\12\0\12\31\36\24\2\0"+
    "\5\24\u038b\0\54\24\66\24\12\24\224\0\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\7\24\4\0\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24\1\24"+
    "\1\24\1\24\1\24\1\24\1\24\1\24\1\24\6\0\10\24\10\24"+
    "\6\24\2\0\6\24\2\0\10\24\10\24\10\24\10\24\6\24\2\0"+
    "\6\24\2\0\10\24\1\0\1\24\1\0\1\24\1\0\1\24\1\0"+
    "\1\24\10\24\10\24\16\24\2\0\10\24\10\24\10\24\10\24\10\24"+
    "\10\24\5\24\1\0\2\24\4\24\1\24\1\0\1\24\3\0\3\24"+
    "\1\0\2\24\4\24\1\24\3\0\4\24\2\0\2\24\4\24\4\0"+
    "\10\24\5\24\5\0\3\24\1\0\2\24\4\24\1\24\102\0\2\31"+
    "\23\0\1\31\34\0\1\24\15\0\1\24\120\0\15\31\4\0\1\31"+
    "\3\0\6\31\27\0\1\24\4\0\1\24\2\0\1\24\3\24\2\24"+
    "\3\24\1\24\1\0\1\24\3\0\5\24\6\0\1\24\1\0\1\24"+
    "\1\0\1\24\1\0\4\24\1\0\1\24\2\24\1\0\1\24\1\24"+
    "\4\24\1\24\3\0\1\24\2\24\5\0\1\24\4\24\26\0\44\24"+
    "\u0e81\0\1\24\1\24\1\24\31\0\11\24\6\31\1\0\5\24\2\0"+
    "\3\24\1\24\1\24\4\0\126\24\2\0\2\31\2\0\2\24\1\24"+
    "\1\0\132\24\1\31\3\24\1\24\5\0\50\24\4\0\136\24\21\0"+
    "\30\24\70\0\20\24\u0200\0\u19b6\24\112\0\u51a6\24\132\0\u048d\24\u0773\0"+
    "\u2ba4\24\u215c\0\u012e\24\2\0\73\24\225\0\7\24\14\0\5\24\5\0"+
    "\1\24\1\31\12\24\1\0\15\24\1\0\5\24\1\0\1\24\1\0"+
    "\2\24\1\0\2\24\1\0\154\24\41\0\u016b\24\22\0\100\24\2\0"+
    "\66\24\50\0\14\24\4\0\20\31\20\0\4\31\17\0\2\31\30\0"+
    "\3\31\40\0\5\24\1\0\207\24\23\0\12\31\7\0\32\24\4\0"+
    "\1\31\1\0\32\24\12\0\1\31\12\24\1\24\55\24\2\24\37\24"+
    "\3\0\6\24\2\0\6\24\2\0\6\24\2\0\3\24\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\0\2\2\4\0\1\3\2\4\4\5"+
    "\1\6\6\5\1\7\1\5\1\10\1\5\1\11\1\12"+
    "\1\13\1\12\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\3\1\23\1\24\1\25\1\26\1\5\1\27"+
    "\5\5\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\6\1\20"+
    "\1\1\1\45\1\13\1\14\1\46\1\47\1\25\1\26"+
    "\1\46\3\50\1\51\3\5\2\52\1\53\1\54\1\5"+
    "\1\2\1\55\1\13\1\14\1\56\1\25\1\26\1\2"+
    "\1\13\1\14\1\25\1\26\1\57\1\60\1\61\1\17"+
    "\1\62\1\46\3\63\1\64\3\65\2\66\1\7\1\4"+
    "\4\0\1\4\1\67\1\0\1\70\5\5\1\6\1\0"+
    "\2\5\1\71\1\5\1\72\1\73\1\74\5\5\1\75"+
    "\3\12\1\76\3\12\1\77\1\100\1\101\1\102\1\103"+
    "\1\104\1\105\1\106\1\107\1\110\11\5\1\111\1\112"+
    "\1\113\1\114\1\115\1\116\3\0\1\117\1\50\2\5"+
    "\6\52\2\0\1\120\1\121\1\63\1\0\3\66\1\122"+
    "\3\66\1\0\1\123\1\0\3\4\1\67\1\0\1\124"+
    "\4\5\1\6\1\0\2\5\1\125\1\126\1\5\1\127"+
    "\4\5\1\12\1\130\1\131\1\0\1\130\1\132\1\133"+
    "\1\134\1\135\4\5\1\136\3\5\1\137\3\0\1\140"+
    "\3\0\1\50\1\5\1\52\2\141\1\63\1\0\1\66"+
    "\1\142\1\143\1\0\1\142\1\5\2\0\2\5\1\6"+
    "\1\0\5\5\1\144\1\145\1\0\2\146\1\0\1\5"+
    "\1\147\2\5\1\150\2\5\3\0\1\151\12\0\2\143"+
    "\1\0\1\5\2\0\1\152\1\5\1\6\1\0\1\153"+
    "\4\5\1\0\2\130\1\0\1\5\1\154\1\5\1\155"+
    "\1\156\6\0\2\141\4\0\2\142\1\0\1\157\1\160"+
    "\1\6\1\0\1\5\1\161\1\162\1\163\3\130\1\5"+
    "\1\164\5\0\3\141\3\142\1\6\1\0\1\5\1\146"+
    "\1\0\1\165\2\0\1\166\1\0\1\140\3\0\1\140"+
    "\1\0\1\45\4\0\1\167\1\0\1\170\2\130\4\0"+
    "\2\141\2\142\1\167\7\0\1\140\2\0\1\140\5\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\111\0\222\0\333\0\u0124\0\u016d\0\u01b6\0\u01ff"+
    "\0\u0248\0\u0291\0\u02da\0\u0323\0\u036c\0\u03b5\0\u03fe\0\u0447"+
    "\0\u0490\0\u04d9\0\u0522\0\u056b\0\u05b4\0\u05fd\0\u0646\0\u068f"+
    "\0\u06d8\0\u0323\0\u0721\0\u076a\0\u07b3\0\u07fc\0\u0845\0\u0323"+
    "\0\u088e\0\u0323\0\u0323\0\u08d7\0\u0920\0\u0969\0\u09b2\0\u09fb"+
    "\0\u0a44\0\u0323\0\u0323\0\u0323\0\u0323\0\u0a8d\0\u0323\0\u0ad6"+
    "\0\u0b1f\0\u0b68\0\u0bb1\0\u0bfa\0\u0c43\0\u0c8c\0\u0cd5\0\u0d1e"+
    "\0\u0d67\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323\0\u0323"+
    "\0\u0323\0\u0db0\0\u0df9\0\u0e42\0\u0e8b\0\u0e42\0\u0e42\0\u0ed4"+
    "\0\u0323\0\u0e42\0\u0e42\0\u0323\0\u0f1d\0\u0f66\0\u0faf\0\u0323"+
    "\0\u0ff8\0\u1041\0\u108a\0\u10d3\0\u111c\0\u0323\0\u0323\0\u1165"+
    "\0\u11ae\0\u0323\0\u11f7\0\u11ae\0\u0323\0\u11ae\0\u11ae\0\u1240"+
    "\0\u1289\0\u1240\0\u1240\0\u1240\0\u12d2\0\u0323\0\u0323\0\u0323"+
    "\0\u0323\0\u131b\0\u1364\0\u13ad\0\u13f6\0\u0323\0\u0323\0\u143f"+
    "\0\u0e8b\0\u1488\0\u14d1\0\u151a\0\u1563\0\u15ac\0\u15f5\0\u163e"+
    "\0\u1687\0\u0323\0\u16d0\0\u1719\0\u0323\0\u1762\0\u17ab\0\u17f4"+
    "\0\u183d\0\u1886\0\u18cf\0\u1918\0\u1961\0\u19aa\0\u0447\0\u19f3"+
    "\0\u0447\0\u0447\0\u0447\0\u1a3c\0\u1a85\0\u1ace\0\u1b17\0\u1b60"+
    "\0\u0323\0\u1ba9\0\u1bf2\0\u1c3b\0\u0323\0\u1c84\0\u1ccd\0\u1d16"+
    "\0\u0323\0\u0323\0\u0323\0\u1d5f\0\u0323\0\u0323\0\u1da8\0\u0323"+
    "\0\u1df1\0\u0323\0\u1e3a\0\u1e83\0\u1ecc\0\u1f15\0\u1f5e\0\u1fa7"+
    "\0\u1ff0\0\u2039\0\u2082\0\u0323\0\u20cb\0\u0323\0\u0323\0\u0323"+
    "\0\u0323\0\u2114\0\u215d\0\u21a6\0\u0f1d\0\u21ef\0\u2238\0\u2281"+
    "\0\u22ca\0\u2313\0\u235c\0\u23a5\0\u23ee\0\u2437\0\u11f7\0\u1289"+
    "\0\u0323\0\u1364\0\u2480\0\u24c9\0\u2512\0\u255b\0\u25a4\0\u0323"+
    "\0\u25ed\0\u2636\0\u267f\0\u26c8\0\u0323\0\u151a\0\u2711\0\u275a"+
    "\0\u27a3\0\u27ec\0\u2835\0\u0447\0\u287e\0\u28c7\0\u2910\0\u2959"+
    "\0\u29a2\0\u29eb\0\u2a34\0\u2a7d\0\u0447\0\u0447\0\u2ac6\0\u0447"+
    "\0\u2b0f\0\u2b58\0\u2ba1\0\u2bea\0\u2c33\0\u2c7c\0\u0323\0\u2c33"+
    "\0\u2cc5\0\u0323\0\u0323\0\u0323\0\u0447\0\u2d0e\0\u2d57\0\u2da0"+
    "\0\u2de9\0\u0447\0\u2e32\0\u2e7b\0\u2ec4\0\u0323\0\u2f0d\0\u2f56"+
    "\0\u2f9f\0\u0323\0\u2fe8\0\u3031\0\u307a\0\u30c3\0\u310c\0\u0323"+
    "\0\u3155\0\u319e\0\u31e7\0\u3230\0\u3279\0\u32c2\0\u0323\0\u3279"+
    "\0\u330b\0\u3354\0\u339d\0\u33e6\0\u342f\0\u3478\0\u34c1\0\u350a"+
    "\0\u3553\0\u359c\0\u35e5\0\u362e\0\u3677\0\u0447\0\u0447\0\u36c0"+
    "\0\u3709\0\u3752\0\u379b\0\u37e4\0\u0447\0\u382d\0\u3876\0\u0447"+
    "\0\u38bf\0\u3908\0\u3951\0\u399a\0\u39e3\0\u0323\0\u3a2c\0\u3a75"+
    "\0\u3abe\0\u3b07\0\u3b50\0\u3b99\0\u3be2\0\u3c2b\0\u3c74\0\u3cbd"+
    "\0\u3d06\0\u3d4f\0\u3d98\0\u3de1\0\u3e2a\0\u3e73\0\u0447\0\u3ebc"+
    "\0\u3f05\0\u3f4e\0\u0447\0\u3f97\0\u3fe0\0\u4029\0\u4072\0\u40bb"+
    "\0\u4104\0\u414d\0\u4196\0\u41df\0\u0447\0\u4228\0\u0447\0\u0447"+
    "\0\u4271\0\u42ba\0\u4303\0\u2313\0\u2437\0\u434c\0\u4395\0\u43de"+
    "\0\u4427\0\u4470\0\u44b9\0\u4502\0\u454b\0\u4594\0\u45dd\0\u0447"+
    "\0\u0447\0\u4626\0\u466f\0\u46b8\0\u0447\0\u0447\0\u0447\0\u4701"+
    "\0\u474a\0\u4793\0\u47dc\0\u0447\0\u4825\0\u486e\0\u48b7\0\u4900"+
    "\0\u4949\0\u0323\0\u4992\0\u49db\0\u3279\0\u4a24\0\u4a6d\0\u4ab6"+
    "\0\u4aff\0\u4b48\0\u0323\0\u4701\0\u0323\0\u4b91\0\u4bda\0\u0447"+
    "\0\u4c23\0\u4271\0\u4c6c\0\u4cb5\0\u4cfe\0\u42ba\0\u4d47\0\u0323"+
    "\0\u4d90\0\u4dd9\0\u4e22\0\u4e6b\0\u4eb4\0\u4efd\0\u0447\0\u40bb"+
    "\0\u4196\0\u4f46\0\u4f8f\0\u4fd8\0\u5021\0\u434c\0\u4427\0\u4502"+
    "\0\u45dd\0\u506a\0\u50b3\0\u50fc\0\u5145\0\u518e\0\u51d7\0\u5220"+
    "\0\u5269\0\u50fc\0\u52b2\0\u52fb\0\u50b3\0\u5344\0\u538d\0\u53d6"+
    "\0\u541f\0\u5468";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\2\16\1\17\1\16\2\20\1\21\1\22"+
    "\1\23\1\14\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\4\20\1\33\1\20\1\14\1\34\1\35\1\20"+
    "\1\36\1\20\3\33\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\20\1\57\1\60\1\61\1\20"+
    "\1\62\1\63\1\20\1\64\1\20\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77"+
    "\1\100\1\101\1\14\1\15\2\16\1\17\1\16\2\20"+
    "\1\21\1\22\1\102\1\14\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\4\20\1\33\1\20\1\14\1\34"+
    "\1\35\1\20\1\36\1\20\3\33\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\103\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\20\1\57\1\60"+
    "\1\61\1\20\1\62\1\63\1\20\1\64\1\20\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\12\104\1\105\30\104\1\106"+
    "\1\104\1\107\3\104\1\110\3\104\1\111\1\104\1\112"+
    "\1\113\30\104\4\114\1\115\1\114\4\115\2\114\3\115"+
    "\1\116\2\115\1\114\6\115\2\114\1\117\1\115\1\114"+
    "\4\115\1\114\1\40\1\114\1\42\1\120\10\114\1\54"+
    "\1\55\2\115\1\114\10\115\15\114\1\14\1\15\2\16"+
    "\1\17\1\16\2\20\1\121\1\22\2\14\1\122\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\4\20\1\123\1\20"+
    "\1\14\1\34\1\35\1\20\1\36\1\20\3\123\1\124"+
    "\1\40\1\125\1\42\1\120\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\126\1\127\1\54\1\55\1\56\1\20"+
    "\1\57\1\130\1\61\1\20\1\62\1\63\1\20\1\64"+
    "\1\20\1\65\1\66\1\67\1\70\1\71\1\72\1\73"+
    "\1\74\1\75\1\76\1\77\1\100\1\101\13\131\1\114"+
    "\26\131\1\132\1\133\1\131\1\134\1\120\6\131\1\135"+
    "\1\131\1\136\1\137\30\131\13\140\1\114\27\140\1\141"+
    "\1\132\1\142\1\114\6\140\1\135\1\140\1\143\1\144"+
    "\30\140\4\114\1\145\1\114\4\145\1\105\1\114\6\145"+
    "\1\114\6\145\2\114\2\145\1\114\4\145\1\146\1\40"+
    "\1\147\1\42\1\120\1\114\1\150\1\114\1\151\1\152"+
    "\1\114\1\135\1\114\1\54\1\55\2\145\1\114\10\145"+
    "\21\114\1\153\1\114\4\153\2\114\3\153\1\154\2\153"+
    "\1\114\6\153\2\114\1\155\1\153\1\114\4\153\1\114"+
    "\1\40\1\114\1\42\1\120\3\114\1\156\4\114\1\54"+
    "\1\55\2\153\1\114\10\153\15\114\10\157\1\160\1\157"+
    "\1\161\1\157\1\160\12\157\1\160\7\157\3\160\1\162"+
    "\1\40\1\163\1\42\1\120\10\157\1\54\1\55\3\157"+
    "\1\160\24\157\1\14\1\15\2\16\1\17\1\16\2\20"+
    "\1\121\1\22\1\105\1\14\1\122\1\25\1\26\1\27"+
    "\1\30\1\31\1\164\4\20\1\123\1\20\1\14\1\34"+
    "\1\35\1\20\1\36\1\20\3\123\1\124\1\40\1\125"+
    "\1\42\1\120\1\44\1\45\1\103\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\20\1\57\1\130"+
    "\1\61\1\20\1\62\1\63\1\20\1\64\1\20\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75"+
    "\1\76\1\77\1\100\1\101\112\0\1\165\1\166\1\165"+
    "\1\0\1\165\1\167\1\170\1\171\1\172\3\0\1\170"+
    "\10\0\1\167\1\171\1\172\1\0\1\173\2\174\1\0"+
    "\1\175\53\0\3\16\1\0\1\16\3\0\1\172\16\0"+
    "\1\172\1\0\1\173\2\174\1\0\1\175\53\0\11\20"+
    "\2\0\4\20\1\176\1\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\1\20\1\177\1\0\10\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\16\0\7\20\1\200"+
    "\1\20\2\0\1\200\5\20\1\0\4\20\1\200\2\20"+
    "\1\0\2\20\1\0\1\20\3\200\1\37\1\0\1\41"+
    "\14\0\2\20\1\0\1\201\7\20\16\0\3\20\1\202"+
    "\5\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\15\0\13\102\1\0"+
    "\1\203\30\102\1\23\1\204\10\102\1\23\31\102\1\0"+
    "\7\20\1\200\1\205\2\0\1\200\1\206\4\20\1\0"+
    "\4\20\1\200\2\20\1\0\2\20\1\0\1\20\3\200"+
    "\1\37\1\0\1\41\14\0\2\20\1\0\1\200\7\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\1\207\7\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\1\210\1\20"+
    "\1\0\4\20\17\0\2\20\1\0\10\20\16\0\11\20"+
    "\2\0\4\20\1\211\1\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\1\212\1\213\1\0\5\20\1\214"+
    "\2\20\16\0\11\20\2\0\1\20\1\215\4\20\1\0"+
    "\7\20\1\0\2\20\1\0\4\20\17\0\2\20\1\0"+
    "\10\20\16\0\10\20\1\216\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\7\20\1\200\1\20\2\0\1\200\5\20\1\0"+
    "\4\20\1\200\2\20\1\0\2\20\1\0\1\20\3\200"+
    "\1\37\1\0\1\41\14\0\2\20\1\0\1\200\7\20"+
    "\16\0\3\173\1\0\1\173\104\0\5\20\1\217\2\20"+
    "\1\220\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\65\0\1\221\40\0"+
    "\13\222\1\0\26\222\1\223\1\224\2\222\1\225\42\222"+
    "\13\226\1\0\27\226\1\227\1\230\1\226\1\225\42\226"+
    "\50\0\1\231\110\0\1\232\110\0\1\233\1\234\1\235"+
    "\106\0\1\236\1\0\1\237\106\0\1\240\2\0\1\241"+
    "\105\0\1\242\41\0\11\20\2\0\1\20\1\243\1\20"+
    "\1\244\2\20\1\0\7\20\1\0\2\20\1\0\4\20"+
    "\17\0\2\20\1\0\1\245\7\20\16\0\3\20\1\246"+
    "\3\20\1\200\1\20\2\0\1\200\5\20\1\0\4\20"+
    "\1\200\2\20\1\0\1\247\1\20\1\0\1\20\3\200"+
    "\1\37\1\0\1\41\14\0\2\20\1\0\1\200\7\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\1\250\7\20\16\0"+
    "\3\20\1\251\5\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\11\20\2\0\3\20\1\252\2\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\7\20\1\253\65\0\1\254"+
    "\23\0\1\255\64\0\1\256\110\0\1\257\110\0\1\260"+
    "\110\0\1\261\40\0\13\102\1\0\32\102\1\0\42\102"+
    "\4\0\1\262\1\0\4\262\2\0\6\262\1\0\6\262"+
    "\2\0\2\262\1\0\4\262\6\0\1\233\1\234\1\235"+
    "\6\0\2\262\1\0\10\262\15\0\12\104\1\0\36\104"+
    "\1\0\3\104\1\0\33\104\13\105\1\0\32\105\1\0"+
    "\42\105\4\0\1\262\1\0\4\262\2\0\6\262\1\0"+
    "\6\262\2\0\2\262\1\0\4\262\11\0\1\263\1\264"+
    "\4\0\2\262\1\0\10\262\16\0\11\115\2\0\6\115"+
    "\1\0\1\115\1\0\4\115\2\0\2\115\1\0\4\115"+
    "\5\0\1\115\11\0\2\115\1\0\10\115\16\0\11\115"+
    "\2\0\6\115\1\0\1\115\1\0\4\115\2\0\2\115"+
    "\1\0\4\115\5\0\1\115\11\0\1\265\1\115\1\0"+
    "\10\115\16\0\10\115\1\266\2\0\6\115\1\0\1\115"+
    "\1\0\4\115\2\0\2\115\1\0\4\115\5\0\1\115"+
    "\11\0\2\115\1\0\10\115\16\0\7\20\1\267\1\20"+
    "\2\0\1\267\5\20\1\0\4\20\1\267\2\20\1\0"+
    "\2\20\1\0\1\20\3\267\1\124\1\0\1\125\14\0"+
    "\2\20\1\0\1\270\7\20\16\0\7\20\1\267\1\205"+
    "\2\0\1\267\1\206\4\20\1\0\4\20\1\267\2\20"+
    "\1\0\2\20\1\0\1\20\3\267\1\124\1\0\1\125"+
    "\14\0\2\20\1\0\1\267\7\20\16\0\7\20\1\267"+
    "\1\20\2\0\1\267\5\20\1\0\4\20\1\267\2\20"+
    "\1\0\2\20\1\0\1\20\3\267\1\124\1\0\1\125"+
    "\14\0\2\20\1\0\1\267\7\20\15\0\13\271\1\0"+
    "\26\271\1\272\1\273\2\271\1\0\42\271\13\274\1\0"+
    "\27\274\1\275\1\276\1\274\1\0\42\274\1\0\3\20"+
    "\1\246\3\20\1\267\1\20\2\0\1\267\5\20\1\0"+
    "\4\20\1\267\2\20\1\0\1\247\1\20\1\0\1\20"+
    "\3\267\1\124\1\0\1\125\14\0\2\20\1\0\1\267"+
    "\7\20\15\0\13\131\1\0\26\131\1\0\1\277\2\131"+
    "\1\0\6\131\1\0\144\131\13\140\1\0\27\140\1\300"+
    "\1\0\1\140\1\0\6\140\1\0\144\140\1\0\11\145"+
    "\2\0\6\145\1\0\1\145\1\0\4\145\2\0\2\145"+
    "\1\0\4\145\5\0\1\145\11\0\2\145\1\0\10\145"+
    "\67\0\1\301\37\0\11\153\2\0\6\153\1\0\1\153"+
    "\1\0\4\153\2\0\2\153\1\0\4\153\5\0\1\153"+
    "\11\0\2\153\1\0\10\153\16\0\11\153\2\0\6\153"+
    "\1\0\1\153\1\0\4\153\2\0\2\153\1\0\4\153"+
    "\5\0\1\153\11\0\1\302\1\153\1\0\10\153\16\0"+
    "\10\153\1\303\2\0\6\153\1\0\1\153\1\0\4\153"+
    "\2\0\2\153\1\0\4\153\5\0\1\153\11\0\2\153"+
    "\1\0\10\153\25\0\1\304\3\0\1\304\12\0\1\304"+
    "\7\0\3\304\1\162\1\0\1\163\17\0\1\304\24\0"+
    "\13\305\1\0\26\305\1\306\1\307\2\305\1\310\42\305"+
    "\13\311\1\0\27\311\1\312\1\313\1\311\1\310\42\311"+
    "\12\0\1\314\33\0\1\315\10\0\1\316\32\0\1\165"+
    "\1\166\1\165\1\0\1\165\3\0\1\172\16\0\1\172"+
    "\1\0\1\173\2\174\1\0\1\175\53\0\3\166\1\0"+
    "\1\166\24\0\1\173\2\174\1\0\1\175\53\0\5\317"+
    "\2\0\1\317\3\0\1\317\1\0\1\317\6\0\1\317"+
    "\1\0\1\317\3\0\2\317\2\0\1\317\21\0\1\317"+
    "\30\0\1\320\1\0\1\320\1\0\1\320\104\0\1\321"+
    "\3\0\1\321\104\0\3\173\1\0\1\173\25\0\2\174"+
    "\1\0\1\175\53\0\3\322\1\0\1\322\27\0\1\323"+
    "\11\0\1\323\42\0\11\20\2\0\2\20\1\324\3\20"+
    "\1\0\7\20\1\0\2\20\1\0\4\20\17\0\2\20"+
    "\1\0\10\20\16\0\11\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\1\20\1\325\1\0"+
    "\10\20\16\0\7\20\1\326\1\20\2\0\1\326\5\20"+
    "\1\0\4\20\1\326\2\20\1\0\2\20\1\0\1\20"+
    "\3\326\1\37\1\0\1\41\14\0\2\20\1\0\1\326"+
    "\7\20\16\0\7\20\1\326\1\20\2\0\1\326\5\20"+
    "\1\0\4\20\1\326\2\20\1\0\1\327\1\20\1\0"+
    "\1\20\3\326\1\37\1\0\1\41\14\0\2\20\1\0"+
    "\1\326\7\20\16\0\11\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\5\20"+
    "\1\330\2\20\15\0\13\102\1\0\1\102\1\331\30\102"+
    "\1\0\42\102\14\0\1\332\30\0\2\204\10\0\1\204"+
    "\32\0\3\20\1\333\5\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\11\20\2\0\4\20\1\334\1\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\10\20\1\335\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\1\336\1\20\1\0\10\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\3\20\1\337\4\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\1\20\1\340\6\20"+
    "\16\0\11\20\2\0\1\20\1\341\4\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\11\20\2\0\1\342\5\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\11\20\2\0\3\20\1\343\2\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\1\20\1\344\1\0\10\20"+
    "\15\0\13\222\1\0\26\222\1\345\1\224\2\222\1\225"+
    "\42\222\42\0\1\346\1\347\1\0\1\350\1\225\10\0"+
    "\1\350\3\0\1\225\25\0\111\222\13\226\1\0\27\226"+
    "\1\227\1\345\1\226\1\225\153\226\43\0\1\347\1\351"+
    "\1\350\1\225\10\0\1\350\3\0\1\225\75\0\1\352"+
    "\110\0\1\353\110\0\1\354\41\0\11\20\2\0\6\20"+
    "\1\0\7\20\1\0\2\20\1\0\4\20\17\0\2\20"+
    "\1\0\1\355\7\20\16\0\11\20\2\0\4\20\1\356"+
    "\1\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\11\20\2\0\1\20\1\357"+
    "\4\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\11\20\2\0\3\20\1\360"+
    "\2\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\11\20\2\0\6\20\1\0"+
    "\7\20\1\0\2\20\1\0\4\20\17\0\2\20\1\0"+
    "\1\20\1\361\6\20\16\0\11\20\2\0\6\20\1\0"+
    "\7\20\1\0\2\20\1\0\4\20\17\0\2\20\1\0"+
    "\4\20\1\362\3\20\16\0\11\20\2\0\6\20\1\0"+
    "\7\20\1\0\2\20\1\0\4\20\17\0\1\20\1\363"+
    "\1\0\10\20\16\0\11\20\2\0\6\20\1\0\7\20"+
    "\1\0\1\364\1\20\1\0\4\20\17\0\2\20\1\0"+
    "\10\20\16\0\11\20\2\0\3\20\1\365\2\20\1\0"+
    "\7\20\1\0\2\20\1\0\4\20\17\0\2\20\1\0"+
    "\10\20\65\0\1\366\41\0\3\262\1\367\1\262\4\367"+
    "\2\0\6\367\1\0\1\367\1\370\4\367\2\0\2\367"+
    "\1\0\4\367\3\0\2\371\1\262\2\0\1\372\1\373"+
    "\3\0\1\371\1\0\2\367\1\0\10\367\21\0\1\374"+
    "\1\0\4\374\2\0\6\374\1\0\6\374\2\0\2\374"+
    "\1\0\4\374\17\0\2\374\1\0\10\374\64\0\1\375"+
    "\42\0\11\115\2\0\6\115\1\0\1\115\1\0\4\115"+
    "\2\0\2\115\1\0\4\115\5\0\1\115\11\0\1\115"+
    "\1\376\1\0\10\115\16\0\7\20\1\377\1\20\2\0"+
    "\1\377\5\20\1\0\4\20\1\377\2\20\1\0\2\20"+
    "\1\0\1\20\3\377\1\124\1\0\1\125\14\0\2\20"+
    "\1\0\1\377\7\20\16\0\7\20\1\377\1\20\2\0"+
    "\1\377\5\20\1\0\4\20\1\377\2\20\1\0\1\327"+
    "\1\20\1\0\1\20\3\377\1\124\1\0\1\125\14\0"+
    "\2\20\1\0\1\377\7\20\15\0\13\271\1\0\26\271"+
    "\1\u0100\1\273\2\271\1\0\42\271\42\0\1\u0101\46\0"+
    "\111\271\13\274\1\0\27\274\1\275\1\u0100\1\274\1\0"+
    "\153\274\44\0\1\u0102\45\0\11\153\2\0\6\153\1\0"+
    "\1\153\1\0\4\153\2\0\2\153\1\0\4\153\5\0"+
    "\1\153\11\0\1\153\1\u0103\1\0\10\153\25\0\1\u0104"+
    "\3\0\1\u0104\12\0\1\u0104\7\0\3\u0104\1\162\1\0"+
    "\1\163\17\0\1\u0104\24\0\13\305\1\0\26\305\1\u0105"+
    "\1\307\2\305\1\310\42\305\42\0\1\u0106\1\u0107\1\0"+
    "\1\u0108\1\310\10\0\1\u0108\3\0\1\310\25\0\111\305"+
    "\13\311\1\0\27\311\1\312\1\u0105\1\311\1\310\153\311"+
    "\43\0\1\u0107\1\u0109\1\u0108\1\310\10\0\1\u0108\3\0"+
    "\1\310\25\0\13\314\1\0\32\314\1\315\42\314\1\0"+
    "\5\317\2\0\1\317\1\172\2\0\1\317\1\0\1\317"+
    "\6\0\1\317\1\0\1\317\1\172\2\0\2\317\2\0"+
    "\1\317\21\0\1\317\30\0\1\320\1\0\1\320\1\0"+
    "\1\320\3\0\1\172\16\0\1\172\61\0\1\321\3\0"+
    "\1\321\3\0\1\172\16\0\1\172\61\0\3\322\1\0"+
    "\1\322\30\0\1\175\53\0\3\322\1\0\1\322\104\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\1\u010a\1\20"+
    "\1\0\4\20\17\0\2\20\1\0\10\20\16\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\2\20\1\0\4\20"+
    "\1\u010b\1\0\1\u010c\14\0\2\20\1\0\10\20\16\0"+
    "\3\20\1\u010d\5\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\7\20\1\u010e\1\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\15\0"+
    "\13\102\1\0\2\102\1\u010f\27\102\1\0\42\102\15\0"+
    "\1\u0110\74\0\11\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\1\20\1\u0111\1\0\10\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\1\20\1\u0112\6\20"+
    "\16\0\11\20\2\0\1\20\1\u0113\4\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\7\20\1\u0114\1\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\10\20"+
    "\16\0\11\20\2\0\6\20\1\0\7\20\1\0\1\u0115"+
    "\1\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\1\u0116\1\20\1\0\10\20\16\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\1\u0117\1\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\60\0\1\347\1\0"+
    "\1\350\1\225\10\0\1\350\3\0\1\225\25\0\42\346"+
    "\1\u0118\1\u0119\45\346\43\351\1\u011a\1\u011b\44\351\1\0"+
    "\3\20\1\u011c\5\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\4\20\17\0\2\20\1\0\10\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\5\20\1\u011d\2\20\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\1\20\1\u011e\1\0\10\20\16\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\2\20\1\0\3\20"+
    "\1\u011f\17\0\2\20\1\0\10\20\16\0\11\20\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\1\20\1\u0120\1\0\10\20\16\0\10\20\1\u0121\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\10\20\1\u0122\2\0\6\20"+
    "\1\0\7\20\1\0\2\20\1\0\4\20\17\0\2\20"+
    "\1\0\10\20\16\0\11\367\2\0\6\367\1\0\1\367"+
    "\1\370\4\367\2\0\2\367\1\0\4\367\3\0\2\u0123"+
    "\1\367\1\u0124\1\0\1\372\1\373\3\0\1\u0123\1\0"+
    "\2\367\1\0\10\367\16\0\11\370\2\0\6\370\1\0"+
    "\1\370\1\0\4\370\2\0\2\370\1\0\4\370\3\0"+
    "\2\u0125\1\370\1\u0124\6\0\1\u0125\1\0\2\370\1\0"+
    "\10\370\21\0\1\370\1\0\4\370\2\0\6\370\1\0"+
    "\6\370\2\0\2\370\1\0\4\370\3\0\2\371\3\0"+
    "\1\372\1\373\3\0\1\371\1\0\2\370\1\0\10\370"+
    "\67\0\1\372\37\0\11\374\2\0\6\374\1\0\7\374"+
    "\1\0\2\374\1\0\4\374\10\0\1\u0126\6\0\2\374"+
    "\1\0\10\374\64\0\1\u0127\42\0\11\115\2\0\6\115"+
    "\1\0\1\115\1\0\4\115\2\0\1\265\1\115\1\0"+
    "\4\115\5\0\1\115\11\0\2\115\1\0\10\115\16\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\1\u0128\1\0\1\u0129\14\0\2\20\1\0\10\20"+
    "\15\0\42\u0101\1\u012a\1\u012b\45\u0101\43\u0102\1\u012c\1\u012d"+
    "\44\u0102\1\0\11\153\2\0\6\153\1\0\1\153\1\0"+
    "\4\153\2\0\1\302\1\153\1\0\4\153\5\0\1\153"+
    "\11\0\2\153\1\0\10\153\57\0\1\u012e\1\0\1\u012f"+
    "\107\0\1\u0107\1\0\1\u0108\1\310\10\0\1\u0108\3\0"+
    "\1\310\25\0\42\u0106\1\u0130\1\u0131\45\u0106\43\u0109\1\u0132"+
    "\1\u0133\44\u0109\1\0\11\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\1\u0134"+
    "\7\20\57\0\1\u0135\112\0\1\u0136\45\0\11\20\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\2\20\1\u0137\5\20\16\0\11\20\2\0"+
    "\2\20\1\u0138\3\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\15\0\13\102\1\0"+
    "\3\102\1\u0139\26\102\1\0\42\102\16\0\1\u013a\73\0"+
    "\11\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\1\20\1\u013b\1\0\10\20\16\0\11\20"+
    "\2\0\3\20\1\u013c\2\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\10\20\16\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\2\20\1\0\4\20"+
    "\17\0\2\20\1\0\1\u013d\7\20\16\0\3\20\1\u013e"+
    "\5\20\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\16\0\11\20\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\3\20\1\u013f\4\20\15\0\42\346\1\u0140"+
    "\1\u0141\156\346\154\351\1\u0142\1\u0143\44\351\1\0\10\20"+
    "\1\u0144\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\16\0\11\20\2\0"+
    "\6\20\1\0\7\20\1\0\1\u0145\1\20\1\0\4\20"+
    "\17\0\2\20\1\0\10\20\16\0\11\20\2\0\6\20"+
    "\1\0\7\20\1\0\2\20\1\0\4\20\17\0\2\20"+
    "\1\0\1\u0146\7\20\16\0\11\20\2\0\2\20\1\u0147"+
    "\3\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\11\20\2\0\6\20\1\0"+
    "\7\20\1\0\1\u0148\1\20\1\0\4\20\17\0\2\20"+
    "\1\0\10\20\21\0\1\370\1\0\4\370\2\0\6\370"+
    "\1\0\6\370\2\0\2\370\1\0\4\370\3\0\2\u0123"+
    "\1\0\1\u0124\1\0\1\372\1\373\3\0\1\u0123\1\0"+
    "\2\370\1\0\10\370\57\0\1\u0149\1\0\1\u0149\2\u0124"+
    "\6\0\1\u014a\1\0\1\u0124\76\0\2\u0125\1\0\1\u0124"+
    "\6\0\1\u0125\31\0\47\u0127\1\u014b\41\u0127\42\0\1\u014c"+
    "\112\0\1\u014d\44\0\42\u0101\1\u014e\1\u014f\156\u0101\154\u0102"+
    "\1\u0150\1\u0151\44\u0102\42\0\1\u0152\112\0\1\u0153\44\0"+
    "\42\u0106\1\u0154\1\u0155\156\u0106\154\u0109\1\u0156\1\u0157\44\u0109"+
    "\1\0\11\20\2\0\6\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\1\20\1\u0158\6\20"+
    "\57\0\1\346\112\0\1\351\45\0\3\20\1\u0159\5\20"+
    "\2\0\6\20\1\0\7\20\1\0\2\20\1\0\4\20"+
    "\17\0\2\20\1\0\10\20\15\0\13\102\1\0\4\102"+
    "\1\u015a\25\102\1\0\42\102\17\0\1\u015b\72\0\11\20"+
    "\2\0\4\20\1\u015c\1\20\1\0\7\20\1\0\2\20"+
    "\1\0\4\20\17\0\2\20\1\0\10\20\16\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\2\20\1\0\4\20"+
    "\17\0\2\20\1\0\1\20\1\u015d\6\20\16\0\10\20"+
    "\1\u015e\2\0\6\20\1\0\7\20\1\0\2\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\16\0\11\20\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\1\20\1\u015f\6\20\15\0\42\346\1\u0160"+
    "\1\u0141\107\346\1\u0161\1\u0141\45\346\43\351\1\u0142\1\u0162"+
    "\107\351\1\u0142\1\u0160\44\351\1\0\10\20\1\u0163\2\0"+
    "\6\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\16\0\11\20\2\0\4\20\1\u0164"+
    "\1\20\1\0\7\20\1\0\2\20\1\0\4\20\17\0"+
    "\2\20\1\0\10\20\15\0\13\u0149\1\0\26\u0149\1\u0165"+
    "\1\u0166\1\u0165\1\u0149\1\0\6\u0149\1\u0167\33\u0149\46\u014a"+
    "\1\0\7\u014a\1\u0168\32\u014a\47\u0127\1\u0169\41\u0127\42\u0101"+
    "\1\u016a\1\u014f\107\u0101\1\u016b\1\u014f\45\u0101\43\u0102\1\u0150"+
    "\1\u016c\107\u0102\1\u0150\1\u016a\44\u0102\42\0\1\u0106\112\0"+
    "\1\u0109\44\0\42\u0106\1\u016d\1\u0155\107\u0106\1\u016e\1\u0155"+
    "\45\u0106\43\u0109\1\u0156\1\u016f\107\u0109\1\u0156\1\u016d\44\u0109"+
    "\13\102\1\0\5\102\1\u0170\24\102\1\0\42\102\20\0"+
    "\1\u0171\71\0\11\20\2\0\6\20\1\0\7\20\1\0"+
    "\2\20\1\0\3\20\1\u0172\17\0\2\20\1\0\10\20"+
    "\60\0\1\u0173\1\0\1\u0174\1\u0175\10\0\1\u0174\3\0"+
    "\1\u0175\25\0\42\346\1\u0176\1\u0141\45\346\43\351\1\u0142"+
    "\1\u0177\44\351\1\0\11\20\2\0\6\20\1\0\7\20"+
    "\1\0\2\20\1\0\4\20\17\0\2\20\1\0\4\20"+
    "\1\u0178\3\20\15\0\4\u0149\1\u0179\1\u0149\4\u0179\1\u0149"+
    "\1\0\6\u0179\1\u0149\6\u0179\2\u0149\2\u0179\1\u0149\4\u0179"+
    "\1\u0165\1\u0166\2\u0165\1\371\3\u0149\1\u017a\1\u017b\1\u0149"+
    "\1\u0167\1\u0149\1\u0165\1\u0149\2\u0179\1\u0149\10\u0179\126\u0149"+
    "\13\u0167\1\0\27\u0167\1\u017c\2\u0167\1\0\7\u0167\1\u0149"+
    "\32\u0167\4\u014a\1\u017d\1\u014a\4\u017d\2\u014a\6\u017d\1\u014a"+
    "\6\u017d\2\u014a\2\u017d\1\u014a\4\u017d\3\u014a\1\u0168\1\371"+
    "\3\u014a\1\u017e\1\u017f\2\u014a\2\u0168\1\u014a\2\u017d\1\u014a"+
    "\10\u017d\15\u014a\52\u0127\1\u0180\36\u0127\42\u0101\1\u0181\1\u014f"+
    "\45\u0101\43\u0102\1\u0150\1\u0182\44\u0102\42\u0106\1\u0183\1\u0155"+
    "\45\u0106\43\u0109\1\u0156\1\u0184\44\u0109\13\102\1\0\6\102"+
    "\1\u0185\23\102\1\0\42\102\21\0\1\u0186\70\0\11\20"+
    "\2\0\6\20\1\0\7\20\1\0\1\u0187\1\20\1\0"+
    "\4\20\17\0\2\20\1\0\10\20\15\0\42\346\1\u0188"+
    "\1\u0141\45\346\43\351\1\u0142\1\u0189\44\351\1\u0149\11\u0179"+
    "\1\u0149\1\0\6\u0179\1\u0149\1\u0179\1\u0149\4\u0179\2\u0149"+
    "\2\u0179\1\u0149\4\u0179\1\u0165\1\u0166\1\u0165\1\u018a\1\u0125"+
    "\1\u0179\1\u018b\4\u0149\1\u0167\1\u0149\1\u018a\1\u0149\2\u0179"+
    "\1\u0149\10\u0179\30\u0149\1\0\26\u0149\1\u0165\1\u0166\1\u0165"+
    "\1\u0149\1\0\3\u0149\1\u017a\2\u0149\1\u0167\33\u0149\111\u0167"+
    "\1\u014a\11\u017d\2\u014a\6\u017d\1\u014a\1\u017d\1\u014a\4\u017d"+
    "\2\u014a\2\u017d\1\u014a\4\u017d\3\u014a\1\u018c\1\u0125\1\u017d"+
    "\1\u018d\5\u014a\1\u0168\1\u018c\1\u014a\2\u017d\1\u014a\10\u017d"+
    "\63\u014a\1\0\3\u014a\1\u017e\3\u014a\1\u0168\32\u014a\42\u0101"+
    "\1\u018e\1\u014f\45\u0101\43\u0102\1\u0150\1\u018f\44\u0102\42\u0106"+
    "\1\u0190\1\u0155\45\u0106\43\u0109\1\u0156\1\u0191\44\u0109\13\u0192"+
    "\1\0\31\u0192\2\u0185\10\u0192\1\u0185\31\u0192\22\0\1\u0185"+
    "\66\0\13\u0149\1\0\26\u0149\1\u0165\1\u0166\1\u0165\1\u018a"+
    "\1\u0125\1\u0149\1\u018b\4\u0149\1\u0167\1\u0149\1\u018a\44\u0149"+
    "\1\0\26\u0149\1\u0165\1\u0166\1\u0165\1\u018b\1\u0124\6\u0149"+
    "\1\u0193\1\u0149\1\u018b\31\u0149\45\u014a\1\u018c\1\u0125\1\u014a"+
    "\1\u018d\5\u014a\1\u0168\1\u018c\73\u014a\1\u0194\1\u014a\1\u0194"+
    "\1\u018d\1\u0124\7\u014a\1\u0168\1\u018d\31\u014a\13\u0192\1\0"+
    "\32\u0192\1\0\42\u0192\13\u0193\1\u014a\27\u0193\1\u0195\2\u0193"+
    "\1\0\7\u0193\1\u0196\32\u0193\13\u0194\1\u014a\26\u0194\1\u0196"+
    "\1\u0197\1\u0196\1\u0194\1\0\6\u0194\1\u0193\1\u0196\32\u0194"+
    "\46\u0193\1\u0167\7\u0193\1\u0198\32\u0193\4\u0194\1\u0199\1\u0194"+
    "\4\u0199\1\u0194\1\u014a\6\u0199\1\u0194\6\u0199\2\u0194\2\u0199"+
    "\1\u0194\4\u0199\1\u0196\1\u0197\2\u0196\1\371\3\u0194\1\u019a"+
    "\1\u019b\1\u0194\1\u0193\2\u0196\1\u0194\2\u0199\1\u0194\10\u0199"+
    "\63\u0194\1\u0149\7\u0194\1\u0196\32\u0194\4\u0193\1\u019c\1\u0193"+
    "\4\u019c\1\u0193\1\u014a\6\u019c\1\u0193\6\u019c\2\u0193\2\u019c"+
    "\1\u0193\4\u019c\1\u0193\1\u0195\1\u0193\1\u0198\1\371\3\u0193"+
    "\1\u019d\1\u019e\2\u0193\1\u0196\1\u0198\1\u0193\2\u019c\1\u0193"+
    "\10\u019c\15\u0193\1\u0194\11\u0199\1\u0194\1\u014a\6\u0199\1\u0194"+
    "\1\u0199\1\u0194\4\u0199\2\u0194\2\u0199\1\u0194\4\u0199\1\u0196"+
    "\1\u0197\1\u0196\1\u019f\1\u0125\1\u0199\1\u01a0\4\u0194\1\u0193"+
    "\1\u0196\1\u019f\1\u0194\2\u0199\1\u0194\10\u0199\30\u0194\1\u014a"+
    "\26\u0194\1\u0196\1\u0197\1\u0196\1\u0194\1\0\3\u0194\1\u019a"+
    "\2\u0194\1\u0193\1\u0196\32\u0194\1\u0193\11\u019c\1\u0193\1\u014a"+
    "\6\u019c\1\u0193\1\u019c\1\u0193\4\u019c\2\u0193\2\u019c\1\u0193"+
    "\4\u019c\1\u0193\1\u0195\1\u0193\1\u01a1\1\u0125\1\u019c\1\u01a2"+
    "\5\u0193\1\u0196\1\u01a1\1\u0193\2\u019c\1\u0193\10\u019c\30\u0193"+
    "\1\u014a\27\u0193\1\u0195\2\u0193\1\0\3\u0193\1\u019d\3\u0193"+
    "\1\u0196\32\u0193\13\u0194\1\u014a\26\u0194\1\u0196\1\u0197\1\u0196"+
    "\1\u019f\1\u0125\1\u0194\1\u01a0\4\u0194\1\u0193\1\u0196\1\u019f"+
    "\44\u0194\1\u014a\26\u0194\1\u0196\1\u0197\1\u0196\1\u01a0\1\u0124"+
    "\6\u0194\1\u0193\1\u0196\1\u01a0\31\u0194\13\u0193\1\u014a\27\u0193"+
    "\1\u0195\1\u0193\1\u01a1\1\u0125\1\u0193\1\u01a2\5\u0193\1\u0196"+
    "\1\u01a1\44\u0193\1\u014a\26\u0193\1\u0194\1\u0195\1\u0194\1\u01a2"+
    "\1\u0124\7\u0193\1\u0196\1\u01a2\31\u0193";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21681];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\1\2\0\2\1\4\0\1\11\15\1\1\11"+
    "\5\1\1\11\1\1\2\11\6\1\4\11\1\1\1\11"+
    "\12\1\10\11\7\1\1\11\2\1\1\11\3\1\1\11"+
    "\5\1\2\11\2\1\1\11\2\1\1\11\10\1\4\11"+
    "\4\1\2\11\6\1\4\0\1\11\1\1\1\0\1\11"+
    "\6\1\1\0\14\1\1\11\3\1\1\11\3\1\3\11"+
    "\1\1\2\11\1\1\1\11\1\1\1\11\11\1\1\11"+
    "\1\1\4\11\3\0\12\1\2\0\1\11\2\1\1\0"+
    "\3\1\1\11\3\1\1\0\1\11\1\0\4\1\1\0"+
    "\6\1\1\0\14\1\1\11\1\0\1\1\3\11\11\1"+
    "\1\11\3\0\1\11\3\0\2\1\1\11\3\1\1\0"+
    "\2\1\1\11\1\0\2\1\2\0\3\1\1\0\7\1"+
    "\1\0\2\1\1\0\7\1\3\0\1\11\12\0\2\1"+
    "\1\0\1\1\2\0\3\1\1\0\5\1\1\0\2\1"+
    "\1\0\5\1\6\0\2\1\4\0\2\1\1\0\3\1"+
    "\1\0\11\1\5\0\1\11\6\1\1\0\1\1\1\11"+
    "\1\0\1\11\2\0\1\1\1\0\1\1\3\0\1\1"+
    "\1\0\1\11\4\0\1\1\1\0\3\1\4\0\5\1"+
    "\7\0\1\1\2\0\1\1\5\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[418];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
private void enterState(int state) {
    stateStack.push(yystate());
    yybegin(state);
}
private boolean exitState() {
    int size = stateStack.size();
    if (size <= 0) {
        yybegin(YYINITIAL);
        return false;   // error condition
    } else {
        yybegin(stateStack.pop());
        return true;
    }
}

//private void pushState(Integer state) {
//    stateStack.push(state);
//}

// The document can be in either "pyxl" or "normal" state, which translates to the parser states
// IN_PYXL_DOCUMENT and YYINITIAL resp.
//private int documentRootState = YYINITIAL;

// Counter for keeping track of when an embed statment ends, as opposed to when inner braces closes.
int embedBraceCount = 0;

Stack<String> tagStack = new Stack<String>();
Stack<Integer> stateStack = new Stack<Integer>();



private void openTag() {
    tagStack.push("Moo");
    yybegin(IN_PYXL_TAG_NAME);
}

private boolean closeTag() {
    int size = tagStack.size();
    if (size == 1) {
        tagStack.pop();
        // yybegin(documentRootState);    // done with pyxl code.
        exitState();
        return true;
    } else if (size == 0) {
//        yybegin(documentRootState);    // done with pyxl code.
        exitState();
        return false;   // error
    } else {
        tagStack.pop();
        exitState();
//        yybegin(IN_PYXL_BLOCK); // back to pyxl-block state
        return true;
    }
}


private int getSpaceLength(CharSequence string) {
String string1 = string.toString();
string1 = StringUtil.trimEnd(string1, "\\");
string1 = StringUtil.trimEnd(string1, ";");
final String s = StringUtil.trimTrailing(string1);
return yylength()-s.length();

}

// handle a right brace in a python embed
private IElementType handleRightBrace() {

    if (--embedBraceCount == 0) {
        exitState();
        return PyxlTokenTypes.EMBED_END;
    } else {
        return PyTokenTypes.RBRACE;
    }
}



  PyxlLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  PyxlLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 3338) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 109: 
          { return PyTokenTypes.YIELD_KEYWORD;
          }
        case 121: break;
        case 52: 
          { return exitState() ? PyxlTokenTypes.TAGEND : PyxlTokenTypes.BADCHAR;
          }
        case 122: break;
        case 4: 
          { return PyTokenTypes.INTEGER_LITERAL;
          }
        case 123: break;
        case 18: 
          { return PyTokenTypes.DIV;
          }
        case 124: break;
        case 25: 
          { return PyTokenTypes.PERC;
          }
        case 125: break;
        case 11: 
          { return PyTokenTypes.BACKSLASH;
          }
        case 126: break;
        case 31: 
          { return PyTokenTypes.RPAR;
          }
        case 127: break;
        case 3: 
          { return PyTokenTypes.BAD_CHARACTER;
          }
        case 128: break;
        case 19: 
          { return PyTokenTypes.LBRACE;
          }
        case 129: break;
        case 86: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.DEF_KEYWORD;
          }
        case 130: break;
        case 107: 
          { yybegin(IN_DOCSTRING_OWNER); return PyTokenTypes.CLASS_KEYWORD;
          }
        case 131: break;
        case 99: 
          { yypushback(getSpaceLength(yytext())); return PyTokenTypes.DOCSTRING;
          }
        case 132: break;
        case 14: 
          { return PyTokenTypes.MINUS;
          }
        case 133: break;
        case 46: 
          { embedBraceCount++; enterState(IN_PYXL_PYTHON_EMBED); return PyxlTokenTypes.EMBED_START;
          }
        case 134: break;
        case 45: 
          { exitState(); return PyxlTokenTypes.ATTRVALUE_END;
          }
        case 135: break;
        case 10: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 136: break;
        case 39: 
          { enterState(IN_PYXL_PYTHON_EMBED); embedBraceCount++; return PyxlTokenTypes.EMBED_START;
          }
        case 137: break;
        case 38: 
          { return PyxlTokenTypes.BADCHAR;
          }
        case 138: break;
        case 13: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.LINE_BREAK;
          }
        case 139: break;
        case 106: 
          { return PyTokenTypes.BREAK_KEYWORD;
          }
        case 140: break;
        case 33: 
          { return PyTokenTypes.RBRACKET;
          }
        case 141: break;
        case 8: 
          { return PyTokenTypes.DOT;
          }
        case 142: break;
        case 5: 
          { return PyTokenTypes.IDENTIFIER;
          }
        case 143: break;
        case 30: 
          { return PyTokenTypes.LPAR;
          }
        case 144: break;
        case 16: 
          { return PyTokenTypes.LT;
          }
        case 145: break;
        case 53: 
          { yypushback(1); exitState();
          }
        case 146: break;
        case 79: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 147: break;
        case 58: 
          { return PyTokenTypes.IN_KEYWORD;
          }
        case 148: break;
        case 108: 
          { return PyTokenTypes.RAISE_KEYWORD;
          }
        case 149: break;
        case 91: 
          { return PyTokenTypes.GTGTEQ;
          }
        case 150: break;
        case 21: 
          { return PyTokenTypes.SPACE;
          }
        case 151: break;
        case 80: 
          { return exitState() ? PyxlTokenTypes.TAGENDANDCLOSE : PyxlTokenTypes.BADCHAR;
          }
        case 152: break;
        case 115: 
          { return PyTokenTypes.EXCEPT_KEYWORD;
          }
        case 153: break;
        case 56: 
          { return PyTokenTypes.IMAGINARY_LITERAL;
          }
        case 154: break;
        case 42: 
          { return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 155: break;
        case 43: 
          { embedBraceCount++; return PyTokenTypes.LBRACE;
          }
        case 156: break;
        case 89: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 157: break;
        case 50: 
          { yybegin(IN_PYXL_BLOCK); return PyxlTokenTypes.TAGEND;
          }
        case 158: break;
        case 22: 
          { return PyTokenTypes.FORMFEED;
          }
        case 159: break;
        case 23: 
          { return PyTokenTypes.SEMICOLON;
          }
        case 160: break;
        case 17: 
          { return PyTokenTypes.GT;
          }
        case 161: break;
        case 32: 
          { return PyTokenTypes.LBRACKET;
          }
        case 162: break;
        case 7: 
          { return PyTokenTypes.COLON;
          }
        case 163: break;
        case 54: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.SINGLE_QUOTED_STRING;
          }
        case 164: break;
        case 90: 
          { return PyTokenTypes.LTLTEQ;
          }
        case 165: break;
        case 101: 
          { return PyTokenTypes.ELSE_KEYWORD;
          }
        case 166: break;
        case 27: 
          { return PyTokenTypes.OR;
          }
        case 167: break;
        case 119: 
          { // Look for # coding: pyxl
        if(zzCurrentPos == 0) {
            enterState(IN_PYXL_DOCUMENT);
//            documentRootState = IN_PYXL_DOCUMENT;
//            yybegin(IN_PYXL_DOCUMENT);
            return PyTokenTypes.END_OF_LINE_COMMENT;
        }
          }
        case 168: break;
        case 2: 
          { return PyxlTokenTypes.ATTRVALUE;
          }
        case 169: break;
        case 88: 
          { if (zzInput == YYEOF && zzStartRead == 0) return PyTokenTypes.DOCSTRING;
                                 else return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 170: break;
        case 83: 
          { yypushback(yylength()-1); enterState(PENDING_DOCSTRING); return PyTokenTypes.COLON;
          }
        case 171: break;
        case 73: 
          { return PyTokenTypes.MULTEQ;
          }
        case 172: break;
        case 118: 
          { return PyTokenTypes.FINALLY_KEYWORD;
          }
        case 173: break;
        case 110: 
          { return PyTokenTypes.WHILE_KEYWORD;
          }
        case 174: break;
        case 51: 
          { return PyxlTokenTypes.TAGNAME;
          }
        case 175: break;
        case 24: 
          { return PyTokenTypes.MULT;
          }
        case 176: break;
        case 96: 
          { enterState(IN_PYXL_TAG_NAME);
        yypushback(yylength()-1);
        return PyxlTokenTypes.TAGBEGIN;
          }
        case 177: break;
        case 111: 
          { return PyTokenTypes.ASSERT_KEYWORD;
          }
        case 178: break;
        case 71: 
          { return PyTokenTypes.FLOORDIV;
          }
        case 179: break;
        case 114: 
          { return PyTokenTypes.GLOBAL_KEYWORD;
          }
        case 180: break;
        case 112: 
          { return PyTokenTypes.LAMBDA_KEYWORD;
          }
        case 181: break;
        case 78: 
          { return PyTokenTypes.XOREQ;
          }
        case 182: break;
        case 93: 
          { return PyTokenTypes.FOR_KEYWORD;
          }
        case 183: break;
        case 34: 
          { return PyTokenTypes.AT;
          }
        case 184: break;
        case 87: 
          { return PyTokenTypes.NOT_KEYWORD;
          }
        case 185: break;
        case 9: 
          { return PyTokenTypes.PLUS;
          }
        case 186: break;
        case 63: 
          { return PyTokenTypes.MINUSEQ;
          }
        case 187: break;
        case 72: 
          { return PyTokenTypes.NE;
          }
        case 188: break;
        case 35: 
          { return PyTokenTypes.COMMA;
          }
        case 189: break;
        case 74: 
          { return PyTokenTypes.EXP;
          }
        case 190: break;
        case 64: 
          { return PyTokenTypes.EQEQ;
          }
        case 191: break;
        case 36: 
          { return PyTokenTypes.TICK;
          }
        case 192: break;
        case 1: 
          { return PyxlTokenTypes.STRING;
          }
        case 193: break;
        case 97: 
          { return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 194: break;
        case 44: 
          { return handleRightBrace();
          }
        case 195: break;
        case 120: 
          { return PyTokenTypes.CONTINUE_KEYWORD;
          }
        case 196: break;
        case 66: 
          { return PyTokenTypes.LTLT;
          }
        case 197: break;
        case 65: 
          { return PyTokenTypes.LE;
          }
        case 198: break;
        case 84: 
          { return PyTokenTypes.AND_KEYWORD;
          }
        case 199: break;
        case 40: 
          { yybegin(IN_ATTR); return PyxlTokenTypes.TAGNAME;
          }
        case 200: break;
        case 47: 
          { return PyxlTokenTypes.ATTRNAME;
          }
        case 201: break;
        case 57: 
          { return PyTokenTypes.OR_KEYWORD;
          }
        case 202: break;
        case 6: 
          { if (zzCurrentPos == 0) enterState(PENDING_DOCSTRING); return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 203: break;
        case 62: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.SINGLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 204: break;
        case 104: 
          { return PyTokenTypes.PASS_KEYWORD;
          }
        case 205: break;
        case 98: 
          { if (zzInput == YYEOF) return PyTokenTypes.DOCSTRING;
                                 else exitState(); return PyTokenTypes.TRIPLE_QUOTED_STRING;
          }
        case 206: break;
        case 37: 
          { return PyTokenTypes.END_OF_LINE_COMMENT;
          }
        case 207: break;
        case 117: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
return PyTokenTypes.DOCSTRING;
          }
        case 208: break;
        case 77: 
          { return PyTokenTypes.OREQ;
          }
        case 209: break;
        case 69: 
          { return PyTokenTypes.GTGT;
          }
        case 210: break;
        case 26: 
          { return PyTokenTypes.AND;
          }
        case 211: break;
        case 105: 
          { yybegin(IN_CLOSE_TAG); yypushback(yylength()-2); return PyxlTokenTypes.TAGCLOSE;
          }
        case 212: break;
        case 70: 
          { return PyTokenTypes.DIVEQ;
          }
        case 213: break;
        case 116: 
          { return PyTokenTypes.RETURN_KEYWORD;
          }
        case 214: break;
        case 102: 
          { yypushback(getSpaceLength(yytext())); if (zzCurrentPos != 0) return PyTokenTypes.TRIPLE_QUOTED_STRING;
 enterState(PENDING_DOCSTRING); return PyTokenTypes.DOCSTRING;
          }
        case 215: break;
        case 113: 
          { return PyTokenTypes.IMPORT_KEYWORD;
          }
        case 216: break;
        case 68: 
          { return PyTokenTypes.GE;
          }
        case 217: break;
        case 61: 
          { return PyTokenTypes.PLUSEQ;
          }
        case 218: break;
        case 81: 
          { return PyxlTokenTypes.BUILT_IN_TAG;
          }
        case 219: break;
        case 48: 
          { enterState(ATTR_VALUE_1Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 220: break;
        case 60: 
          { return PyTokenTypes.IS_KEYWORD;
          }
        case 221: break;
        case 92: 
          { return PyTokenTypes.FLOORDIVEQ;
          }
        case 222: break;
        case 55: 
          { return PyTokenTypes.FLOAT_LITERAL;
          }
        case 223: break;
        case 41: 
          { return PyTokenTypes.LINE_BREAK;
          }
        case 224: break;
        case 75: 
          { return PyTokenTypes.PERCEQ;
          }
        case 225: break;
        case 94: 
          { return PyTokenTypes.TRY_KEYWORD;
          }
        case 226: break;
        case 76: 
          { return PyTokenTypes.ANDEQ;
          }
        case 227: break;
        case 15: 
          { return PyTokenTypes.EQ;
          }
        case 228: break;
        case 103: 
          { return PyTokenTypes.FROM_KEYWORD;
          }
        case 229: break;
        case 95: 
          { return PyTokenTypes.EXPEQ;
          }
        case 230: break;
        case 100: 
          { return PyTokenTypes.ELIF_KEYWORD;
          }
        case 231: break;
        case 82: 
          { yypushback(getSpaceLength(yytext())); exitState(); return PyTokenTypes.DOCSTRING;
          }
        case 232: break;
        case 20: 
          { return PyTokenTypes.RBRACE;
          }
        case 233: break;
        case 59: 
          { return PyTokenTypes.IF_KEYWORD;
          }
        case 234: break;
        case 12: 
          { return PyTokenTypes.TAB;
          }
        case 235: break;
        case 67: 
          { return PyTokenTypes.NE_OLD;
          }
        case 236: break;
        case 49: 
          { enterState(ATTR_VALUE_2Q); return PyxlTokenTypes.ATTRVALUE_START;
          }
        case 237: break;
        case 29: 
          { return PyTokenTypes.TILDE;
          }
        case 238: break;
        case 85: 
          { return PyTokenTypes.DEL_KEYWORD;
          }
        case 239: break;
        case 28: 
          { return PyTokenTypes.XOR;
          }
        case 240: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
